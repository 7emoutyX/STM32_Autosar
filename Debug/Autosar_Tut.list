
Autosar_Tut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003a6c  08003a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000003c  20000008  08003b60  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000394  20000044  08003b9c  00005044  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003d8  08003b9c  000053d8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013313  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002765  00000000  00000000  00018387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c0  00000000  00000000  0001aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eff  00000000  00000000  0001beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000226c2  00000000  00000000  0001cdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011b58  00000000  00000000  0003f471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e2b16  00000000  00000000  00050fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00133adf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005278  00000000  00000000  00133b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00138d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000044 	.word	0x20000044
 8000158:	00000000 	.word	0x00000000
 800015c:	08003a54 	.word	0x08003a54

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000048 	.word	0x20000048
 8000178:	08003a54 	.word	0x08003a54

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <Dio_Init>:
#include "dio.h"

// Dio_Init: Initialize the GPIO pin based on configuration
void Dio_Init(Dio_ConfigType *config) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]

    if (config->port == GPIOA) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004c0:	d103      	bne.n	80004ca <Dio_Init+0x2a>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff ffd2 	bl	800046c <LL_AHB2_GRP1_EnableClock>
 80004c8:	e019      	b.n	80004fe <Dio_Init+0x5e>
    } else if (config->port == GPIOB) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <Dio_Init+0xa4>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d103      	bne.n	80004dc <Dio_Init+0x3c>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	2002      	movs	r0, #2
 80004d6:	f7ff ffc9 	bl	800046c <LL_AHB2_GRP1_EnableClock>
 80004da:	e010      	b.n	80004fe <Dio_Init+0x5e>
    } else if (config->port == GPIOC) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a19      	ldr	r2, [pc, #100]	@ (8000548 <Dio_Init+0xa8>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d103      	bne.n	80004ee <Dio_Init+0x4e>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2004      	movs	r0, #4
 80004e8:	f7ff ffc0 	bl	800046c <LL_AHB2_GRP1_EnableClock>
 80004ec:	e007      	b.n	80004fe <Dio_Init+0x5e>
    } else if (config->port == GPIOD) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a16      	ldr	r2, [pc, #88]	@ (800054c <Dio_Init+0xac>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d102      	bne.n	80004fe <Dio_Init+0x5e>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f8:	2008      	movs	r0, #8
 80004fa:	f7ff ffb7 	bl	800046c <LL_AHB2_GRP1_EnableClock>
    }

    // Configure the pin mode
    GPIO_InitStruct.Pin = config->pin;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	889b      	ldrh	r3, [r3, #4]
 8000502:	60fb      	str	r3, [r7, #12]
    if (config->mode == DIO_PIN_MODE_OUTPUT) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	799b      	ldrb	r3, [r3, #6]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d106      	bne.n	800051a <Dio_Init+0x7a>
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
 8000518:	e007      	b.n	800052a <Dio_Init+0x8a>
    } else if (config->mode == DIO_PIN_MODE_INPUT) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	799b      	ldrb	r3, [r3, #6]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d103      	bne.n	800052a <Dio_Init+0x8a>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP; // Change to GPIO_PULLUP if pull-up is needed
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
    }

    HAL_GPIO_Init(config->port, &GPIO_InitStruct);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fcf7 	bl	8000f28 <HAL_GPIO_Init>
}
 800053a:	bf00      	nop
 800053c:	3720      	adds	r7, #32
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	48000400 	.word	0x48000400
 8000548:	48000800 	.word	0x48000800
 800054c:	48000c00 	.word	0x48000c00

08000550 <Dio_ReadChannel>:

// Dio_ReadChannel: Read the level of the specified pin
Dio_LevelType Dio_ReadChannel(Dio_ConfigType *config) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    return (Dio_LevelType)HAL_GPIO_ReadPin(config->port, config->pin);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	889b      	ldrh	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f000 fe50 	bl	8001208 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <Dio_WriteChannel>:

// Dio_WriteChannel: Set the specified pin to the given level
void Dio_WriteChannel(Dio_ConfigType *config, Dio_LevelType level) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(config->port, config->pin, (GPIO_PinState)level);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	889b      	ldrh	r3, [r3, #4]
 8000586:	78fa      	ldrb	r2, [r7, #3]
 8000588:	4619      	mov	r1, r3
 800058a:	f000 fe55 	bl	8001238 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005a6:	f023 0218 	bic.w	r2, r3, #24
 80005aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <main>:
Dio_ConfigType ledConfig2 = {GPIOB, LD2_Pin, DIO_PIN_MODE_OUTPUT};   // LED on GPIOB, LD1 pin
Dio_ConfigType ledConfig3 = {GPIOB, LD3_Pin, DIO_PIN_MODE_OUTPUT};   // LED on GPIOB, LD1 pin
/* ===================================================================================== */
#endif

int main(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    HAL_Init();
 80005c8:	f000 fb20 	bl	8000c0c <HAL_Init>
    SystemClock_Config();
 80005cc:	f000 f892 	bl	80006f4 <SystemClock_Config>
    PeriphCommonClock_Config();
 80005d0:	f000 f906 	bl	80007e0 <PeriphCommonClock_Config>
   // MX_GPIO_Init();
    MX_USART1_UART_Init();
 80005d4:	f000 f936 	bl	8000844 <MX_USART1_UART_Init>
    MX_USB_PCD_Init();
 80005d8:	f000 f966 	bl	80008a8 <MX_USB_PCD_Init>
  //  MX_ADC1_Init();

    //initialisation dyal Buttons and leds instead of MX_GPIO_init()
    /* ===================================================================================== */
    Dio_Init(&buttonConfig);
 80005dc:	483c      	ldr	r0, [pc, #240]	@ (80006d0 <main+0x10c>)
 80005de:	f7ff ff5f 	bl	80004a0 <Dio_Init>
    Dio_Init(&buttonConfig2);
 80005e2:	483c      	ldr	r0, [pc, #240]	@ (80006d4 <main+0x110>)
 80005e4:	f7ff ff5c 	bl	80004a0 <Dio_Init>
    Dio_Init(&buttonConfig3);
 80005e8:	483b      	ldr	r0, [pc, #236]	@ (80006d8 <main+0x114>)
 80005ea:	f7ff ff59 	bl	80004a0 <Dio_Init>
    Dio_Init(&ledConfig);
 80005ee:	483b      	ldr	r0, [pc, #236]	@ (80006dc <main+0x118>)
 80005f0:	f7ff ff56 	bl	80004a0 <Dio_Init>
    Dio_Init(&ledConfig2);
 80005f4:	483a      	ldr	r0, [pc, #232]	@ (80006e0 <main+0x11c>)
 80005f6:	f7ff ff53 	bl	80004a0 <Dio_Init>
    Dio_Init(&ledConfig3);
 80005fa:	483a      	ldr	r0, [pc, #232]	@ (80006e4 <main+0x120>)
 80005fc:	f7ff ff50 	bl	80004a0 <Dio_Init>
    /* ===================================================================================== */


    while (1) {

    	 if (Dio_ReadChannel(&buttonConfig) == STD_LOW) {
 8000600:	4833      	ldr	r0, [pc, #204]	@ (80006d0 <main+0x10c>)
 8000602:	f7ff ffa5 	bl	8000550 <Dio_ReadChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11b      	bne.n	8000644 <main+0x80>
    	            HAL_Delay(50);
 800060c:	2032      	movs	r0, #50	@ 0x32
 800060e:	f000 fb83 	bl	8000d18 <HAL_Delay>
    	            while (Dio_ReadChannel(&buttonConfig) == STD_LOW);
 8000612:	bf00      	nop
 8000614:	482e      	ldr	r0, [pc, #184]	@ (80006d0 <main+0x10c>)
 8000616:	f7ff ff9b 	bl	8000550 <Dio_ReadChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <main+0x50>
    	            HAL_Delay(50);
 8000620:	2032      	movs	r0, #50	@ 0x32
 8000622:	f000 fb79 	bl	8000d18 <HAL_Delay>

    	            static Dio_LevelType ledState = STD_LOW;
    	            ledState = (ledState == STD_LOW) ? STD_HIGH : STD_LOW;
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <main+0x124>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d101      	bne.n	8000632 <main+0x6e>
 800062e:	2201      	movs	r2, #1
 8000630:	e000      	b.n	8000634 <main+0x70>
 8000632:	2200      	movs	r2, #0
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <main+0x124>)
 8000636:	701a      	strb	r2, [r3, #0]
    	            Dio_WriteChannel(&ledConfig, ledState);
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <main+0x124>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4827      	ldr	r0, [pc, #156]	@ (80006dc <main+0x118>)
 8000640:	f7ff ff97 	bl	8000572 <Dio_WriteChannel>
    	        }
    	 if (Dio_ReadChannel(&buttonConfig2) == STD_LOW) {
 8000644:	4823      	ldr	r0, [pc, #140]	@ (80006d4 <main+0x110>)
 8000646:	f7ff ff83 	bl	8000550 <Dio_ReadChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11b      	bne.n	8000688 <main+0xc4>
    	    	            HAL_Delay(50);
 8000650:	2032      	movs	r0, #50	@ 0x32
 8000652:	f000 fb61 	bl	8000d18 <HAL_Delay>
    	    	            while (Dio_ReadChannel(&buttonConfig2) == STD_LOW);
 8000656:	bf00      	nop
 8000658:	481e      	ldr	r0, [pc, #120]	@ (80006d4 <main+0x110>)
 800065a:	f7ff ff79 	bl	8000550 <Dio_ReadChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f9      	beq.n	8000658 <main+0x94>
    	    	            HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	@ 0x32
 8000666:	f000 fb57 	bl	8000d18 <HAL_Delay>

    	    	            static Dio_LevelType ledState2 = STD_LOW;
    	    	            ledState2 = (ledState2 == STD_LOW) ? STD_HIGH : STD_LOW;
 800066a:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <main+0x128>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <main+0xb2>
 8000672:	2201      	movs	r2, #1
 8000674:	e000      	b.n	8000678 <main+0xb4>
 8000676:	2200      	movs	r2, #0
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <main+0x128>)
 800067a:	701a      	strb	r2, [r3, #0]
    	    	            Dio_WriteChannel(&ledConfig2, ledState2);
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <main+0x128>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	4817      	ldr	r0, [pc, #92]	@ (80006e0 <main+0x11c>)
 8000684:	f7ff ff75 	bl	8000572 <Dio_WriteChannel>
    	    	        }
    	 if (Dio_ReadChannel(&buttonConfig3) == STD_LOW) {
 8000688:	4813      	ldr	r0, [pc, #76]	@ (80006d8 <main+0x114>)
 800068a:	f7ff ff61 	bl	8000550 <Dio_ReadChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1b5      	bne.n	8000600 <main+0x3c>
    	    	            HAL_Delay(50);
 8000694:	2032      	movs	r0, #50	@ 0x32
 8000696:	f000 fb3f 	bl	8000d18 <HAL_Delay>
    	    	            while (Dio_ReadChannel(&buttonConfig3) == STD_LOW);
 800069a:	bf00      	nop
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <main+0x114>)
 800069e:	f7ff ff57 	bl	8000550 <Dio_ReadChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f9      	beq.n	800069c <main+0xd8>
    	    	            HAL_Delay(50);
 80006a8:	2032      	movs	r0, #50	@ 0x32
 80006aa:	f000 fb35 	bl	8000d18 <HAL_Delay>

    	    	            static Dio_LevelType ledState3 = STD_LOW;
    	    	            ledState3 = (ledState3 == STD_LOW) ? STD_HIGH : STD_LOW;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <main+0x12c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <main+0xf6>
 80006b6:	2201      	movs	r2, #1
 80006b8:	e000      	b.n	80006bc <main+0xf8>
 80006ba:	2200      	movs	r2, #0
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <main+0x12c>)
 80006be:	701a      	strb	r2, [r3, #0]
    	    	            Dio_WriteChannel(&ledConfig3, ledState3);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <main+0x12c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <main+0x120>)
 80006c8:	f7ff ff53 	bl	8000572 <Dio_WriteChannel>
    	 if (Dio_ReadChannel(&buttonConfig) == STD_LOW) {
 80006cc:	e798      	b.n	8000600 <main+0x3c>
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000010 	.word	0x20000010
 80006d8:	20000018 	.word	0x20000018
 80006dc:	20000020 	.word	0x20000020
 80006e0:	20000028 	.word	0x20000028
 80006e4:	20000030 	.word	0x20000030
 80006e8:	200003d0 	.word	0x200003d0
 80006ec:	200003d1 	.word	0x200003d1
 80006f0:	200003d2 	.word	0x200003d2

080006f4 <SystemClock_Config>:
    	    	        }

    }
}

void SystemClock_Config(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09a      	sub	sp, #104	@ 0x68
 80006f8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2248      	movs	r2, #72	@ 0x48
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f97a 	bl	80039fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	619a      	str	r2, [r3, #24]

    __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800071a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000728:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800072a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	f023 0303 	bic.w	r3, r3, #3
 8000734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	60d3      	str	r3, [r2, #12]
    HAL_PWR_EnableBkUpAccess();
 800073e:	f000 fe8b 	bl	8001458 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff ff27 	bl	8000596 <LL_RCC_LSE_SetDriveCapability>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <SystemClock_Config+0xe8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000750:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <SystemClock_Config+0xe8>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <SystemClock_Config+0xe8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8000764:	2327      	movs	r3, #39	@ 0x27
 8000766:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000780:	2300      	movs	r3, #0
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f9f5 	bl	8001b80 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xac>
        Error_Handler();
 800079c:	f000 f8ac 	bl	80008f8 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007a0:	236f      	movs	r3, #111	@ 0x6f
 80007a2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fd51 	bl	8002268 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xdc>
        Error_Handler();
 80007cc:	f000 f894 	bl	80008f8 <Error_Handler>
    }

    HAL_RCCEx_EnableMSIPLLMode();
 80007d0:	f002 fb0c 	bl	8002dec <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d4:	bf00      	nop
 80007d6:	3768      	adds	r7, #104	@ 0x68
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58000400 	.word	0x58000400

080007e0 <PeriphCommonClock_Config>:

void PeriphCommonClock_Config(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	@ 0x50
 80007e4:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2250      	movs	r2, #80	@ 0x50
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 f905 	bl	80039fc <memset>

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
 80007f2:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80007f6:	603b      	str	r3, [r7, #0]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80007f8:	2318      	movs	r3, #24
 80007fa:	607b      	str	r3, [r7, #4]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80007fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000806:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000808:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800080c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK | RCC_PLLSAI1_ADCCLK;
 800080e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8000812:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000814:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800081a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800081e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000824:	2300      	movs	r3, #0
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000828:	463b      	mov	r3, r7
 800082a:	4618      	mov	r0, r3
 800082c:	f002 f968 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <PeriphCommonClock_Config+0x5a>
        Error_Handler();
 8000836:	f000 f85f 	bl	80008f8 <Error_Handler>
    }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_USART1_UART_Init>:
        Error_Handler();
    }
}
#endif

static void MX_USART1_UART_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 800084a:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <MX_USART1_UART_Init+0x60>)
 800084c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B; // Set to 8B if 7B is not intentional
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 800088e:	f002 fbe4 	bl	800305a <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART1_UART_Init+0x58>
        Error_Handler();
 8000898:	f000 f82e 	bl	80008f8 <Error_Handler>
    }
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000060 	.word	0x20000060
 80008a4:	40013800 	.word	0x40013800

080008a8 <MX_USB_PCD_Init>:

static void MX_USB_PCD_Init(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    hpcd_USB_FS.Instance = USB;
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <MX_USB_PCD_Init+0x4c>)
 80008b0:	601a      	str	r2, [r3, #0]
    hpcd_USB_FS.Init.dev_endpoints = 8;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	711a      	strb	r2, [r3, #4]
    hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	715a      	strb	r2, [r3, #5]
    hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	71da      	strb	r2, [r3, #7]
    hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	721a      	strb	r2, [r3, #8]
    hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	725a      	strb	r2, [r3, #9]
    hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	729a      	strb	r2, [r3, #10]
    hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008d8:	2200      	movs	r2, #0
 80008da:	72da      	strb	r2, [r3, #11]
    if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_USB_PCD_Init+0x48>)
 80008de:	f000 fcc3 	bl	8001268 <HAL_PCD_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USB_PCD_Init+0x44>
        Error_Handler();
 80008e8:	f000 f806 	bl	80008f8 <Error_Handler>
    }
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000f4 	.word	0x200000f4
 80008f4:	40006800 	.word	0x40006800

080008f8 <Error_Handler>:

}
#endif


void Error_Handler(void) {
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
    __disable_irq();
    while (1) {
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <LL_AHB2_GRP1_EnableClock>:
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000910:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800091c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000920:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000936:	b480      	push	{r7}
 8000938:	b085      	sub	sp, #20
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000942:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4313      	orrs	r3, r2
 800094c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800094e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000952:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000984:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	@ 0x70
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2250      	movs	r2, #80	@ 0x50
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 f817 	bl	80039fc <memset>
  if(huart->Instance==USART1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <HAL_UART_MspInit+0x84>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d124      	bne.n	8000a22 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d8:	2301      	movs	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 f88b 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f0:	f7ff ff82 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80009f8:	f7ff ffb6 	bl	8000968 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff ff81 	bl	8000904 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a02:	23c0      	movs	r3, #192	@ 0xc0
 8000a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a12:	2307      	movs	r3, #7
 8000a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 8000a1e:	f000 fa83 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3770      	adds	r7, #112	@ 0x70
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013800 	.word	0x40013800
 8000a30:	48000400 	.word	0x48000400

08000a34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <HAL_PCD_MspInit+0x5c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d118      	bne.n	8000a88 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ff54 	bl	8000904 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f000 fa54 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a80:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000a84:	f7ff ff57 	bl	8000936 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40006800 	.word	0x40006800

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f8e9 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <SystemInit+0x98>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <SystemInit+0x98>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b1c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b20:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <SystemInit+0x9c>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b3e:	f023 0305 	bic.w	r3, r3, #5
 8000b42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b52:	f023 0301 	bic.w	r3, r3, #1
 8000b56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <SystemInit+0xa0>)
 8000b60:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b66:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <SystemInit+0xa0>)
 8000b68:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00
 8000b90:	faf6fefb 	.word	0xfaf6fefb
 8000b94:	22041000 	.word	0x22041000

08000b98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000b98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9c:	3304      	adds	r3, #4

08000b9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ba2:	d3f9      	bcc.n	8000b98 <CopyDataInit>
  bx lr
 8000ba4:	4770      	bx	lr

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ba6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ba8:	3004      	adds	r0, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000baa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>
  bx lr
 8000bae:	4770      	bx	lr

08000bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb4:	f7ff ff9e 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000bb8:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <LoopForever+0x6>)
 8000bba:	490c      	ldr	r1, [pc, #48]	@ (8000bec <LoopForever+0xa>)
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <LoopForever+0xe>)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f7ff ffed 	bl	8000b9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <LoopForever+0x12>)
 8000bc6:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <LoopForever+0x16>)
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <LoopForever+0x1a>)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f7ff ffe7 	bl	8000b9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000bd0:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <LoopForever+0x1e>)
 8000bd2:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <LoopForever+0x22>)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f7ff ffe8 	bl	8000baa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bda:	f002 ff17 	bl	8003a0c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bde:	f7ff fcf1 	bl	80005c4 <main>

08000be2 <LoopForever>:

LoopForever:
  b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000044 	.word	0x20000044
 8000bf0:	08003b60 	.word	0x08003b60
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bf4:	20030000 	.word	0x20030000
 8000bf8:	20030000 	.word	0x20030000
 8000bfc:	08003b9c 	.word	0x08003b9c
  INIT_BSS _sbss, _ebss
 8000c00:	20000044 	.word	0x20000044
 8000c04:	200003d8 	.word	0x200003d8

08000c08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <HAL_Init+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <HAL_Init+0x3c>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f94e 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f80f 	bl	8000c4c <HAL_InitTick>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	e001      	b.n	8000c3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3a:	f7ff feae 	bl	800099a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58004000 	.word	0x58004000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d024      	beq.n	8000caa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	f001 fcae 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8000c64:	4602      	mov	r2, r0
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_InitTick+0x6c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c70:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f948 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10f      	bne.n	8000ca4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d809      	bhi.n	8000c9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c92:	f000 f922 	bl	8000eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_InitTick+0x70>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e007      	b.n	8000cae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e004      	b.n	8000cae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e001      	b.n	8000cae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000040 	.word	0x20000040
 8000cbc:	2000003c 	.word	0x2000003c

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000040 	.word	0x20000040
 8000ce4:	200003d4 	.word	0x200003d4

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200003d4 	.word	0x200003d4

08000d00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTickPrio+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000003c 	.word	0x2000003c

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffe2 	bl	8000ce8 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffd2 	bl	8000ce8 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000040 	.word	0x20000040

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	@ (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	@ 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff47 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff90 	bl	8000e18 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5f 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb2 	bl	8000e80 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e14c      	b.n	80011d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 813e 	beq.w	80011cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8098 	beq.w	80011cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800109c:	4a54      	ldr	r2, [pc, #336]	@ (80011f0 <HAL_GPIO_Init+0x2c8>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010c6:	d019      	beq.n	80010fc <HAL_GPIO_Init+0x1d4>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a4a      	ldr	r2, [pc, #296]	@ (80011f4 <HAL_GPIO_Init+0x2cc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d013      	beq.n	80010f8 <HAL_GPIO_Init+0x1d0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <HAL_GPIO_Init+0x2d0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d00d      	beq.n	80010f4 <HAL_GPIO_Init+0x1cc>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a48      	ldr	r2, [pc, #288]	@ (80011fc <HAL_GPIO_Init+0x2d4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1c8>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a47      	ldr	r2, [pc, #284]	@ (8001200 <HAL_GPIO_Init+0x2d8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_GPIO_Init+0x1c4>
 80010e8:	2304      	movs	r3, #4
 80010ea:	e008      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010ec:	2307      	movs	r3, #7
 80010ee:	e006      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010f0:	2303      	movs	r3, #3
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010fc:	2300      	movs	r3, #0
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110e:	4938      	ldr	r1, [pc, #224]	@ (80011f0 <HAL_GPIO_Init+0x2c8>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111c:	4b39      	ldr	r3, [pc, #228]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001140:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116a:	4a26      	ldr	r2, [pc, #152]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 8001172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 80011a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <HAL_GPIO_Init+0x2dc>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f47f aeab 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40010000 	.word	0x40010000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48001000 	.word	0x48001000
 8001204:	58000800 	.word	0x58000800

08001208 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e002      	b.n	800125c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0c0      	b.n	80013fc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fbd0 	bl	8000a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fb72 	bl	800398a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e03e      	b.n	800132a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3311      	adds	r3, #17
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3310      	adds	r3, #16
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	3313      	adds	r3, #19
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	3320      	adds	r3, #32
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3324      	adds	r3, #36	@ 0x24
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	791b      	ldrb	r3, [r3, #4]
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3bb      	bcc.n	80012ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e044      	b.n	80013c4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3b5      	bcc.n	800133a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013da:	f002 faf1 	bl	80039c0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a9b      	ldrb	r3, [r3, #10]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f805 	bl	8001404 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001428:	b29b      	uxth	r3, r3
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	b29a      	uxth	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800143c:	b29b      	uxth	r3, r3
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	58000400 	.word	0x58000400

08001478 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <HAL_PWREx_GetVoltageRange+0x18>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	58000400 	.word	0x58000400

08001494 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80014a6:	d101      	bne.n	80014ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_RCC_HSE_Enable>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_RCC_HSE_Disable>:
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_RCC_HSE_IsReady>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001506:	d101      	bne.n	800150c <LL_RCC_HSE_IsReady+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_RCC_HSE_IsReady+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_RCC_HSI_Enable>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_RCC_HSI_Disable>:
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_RCC_HSI_IsReady>:
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001566:	d101      	bne.n	800156c <LL_RCC_HSI_IsReady+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_RCC_HSI_IsReady+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_RCC_HSI48_Enable>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_RCC_HSI48_Disable>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_RCC_HSI48_IsReady>:
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d101      	bne.n	80015fe <LL_RCC_HSI48_IsReady+0x18>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <LL_RCC_HSI48_IsReady+0x1a>
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_RCC_LSE_Enable>:
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_RCC_LSE_Disable>:
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_RCC_LSE_EnableBypass>:
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_RCC_LSE_DisableBypass>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d101      	bne.n	80016aa <LL_RCC_LSE_IsReady+0x18>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_RCC_LSE_IsReady+0x1a>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d101      	bne.n	8001712 <LL_RCC_LSI1_IsReady+0x18>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <LL_RCC_LSI1_IsReady+0x1a>
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b08      	cmp	r3, #8
 8001774:	d101      	bne.n	800177a <LL_RCC_LSI2_IsReady+0x18>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_RCC_LSI2_IsReady+0x1a>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800178e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001796:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d101      	bne.n	8001806 <LL_RCC_MSI_IsReady+0x16>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_RCC_MSI_IsReady+0x18>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800184a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001850:	d901      	bls.n	8001856 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001852:	23b0      	movs	r3, #176	@ 0xb0
 8001854:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 0203 	bic.w	r2, r3, #3
 80018a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001902:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001906:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800190a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4313      	orrs	r3, r2
 8001912:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001932:	f023 020f 	bic.w	r2, r3, #15
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193e:	4313      	orrs	r3, r2
 8001940:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a34:	6013      	str	r3, [r2, #0]
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a52:	d101      	bne.n	8001a58 <LL_RCC_PLL_IsReady+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_RCC_PLL_IsReady+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad8:	d101      	bne.n	8001ade <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001afe:	d101      	bne.n	8001b04 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b24:	d101      	bne.n	8001b2a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b48:	d101      	bne.n	8001b4e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b6c:	d101      	bne.n	8001b72 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08d      	sub	sp, #52	@ 0x34
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e363      	b.n	800225a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 808d 	beq.w	8001cba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba0:	f7ff fe89 	bl	80018b6 <LL_RCC_GetSysClkSource>
 8001ba4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba6:	f7ff ff82 	bl	8001aae <LL_RCC_PLL_GetMainSource>
 8001baa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3e>
 8001bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d147      	bne.n	8001c48 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d144      	bne.n	8001c48 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e347      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001bce:	f7ff fe34 	bl	800183a <LL_RCC_MSI_GetRange>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	429c      	cmp	r4, r3
 8001bd6:	d914      	bls.n	8001c02 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fd2f 	bl	8002640 <RCC_SetFlashLatencyFromMSIRange>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e336      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe0e 	bl	8001812 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe32 	bl	8001864 <LL_RCC_MSI_SetCalibTrimming>
 8001c00:	e013      	b.n	8001c2a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe03 	bl	8001812 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe27 	bl	8001864 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fd10 	bl	8002640 <RCC_SetFlashLatencyFromMSIRange>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e317      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c2a:	f000 fcc9 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4aa4      	ldr	r2, [pc, #656]	@ (8001ec4 <HAL_RCC_OscConfig+0x344>)
 8001c32:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c34:	4ba4      	ldr	r3, [pc, #656]	@ (8001ec8 <HAL_RCC_OscConfig+0x348>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f807 	bl	8000c4c <HAL_InitTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d039      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e308      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01e      	beq.n	8001c8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c50:	f7ff fdb0 	bl	80017b4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f848 	bl	8000ce8 <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f844 	bl	8000ce8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e2f5      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c6e:	f7ff fdbf 	bl	80017f0 <LL_RCC_MSI_IsReady>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f1      	beq.n	8001c5c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdc8 	bl	8001812 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fdec 	bl	8001864 <LL_RCC_MSI_SetCalibTrimming>
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c8e:	f7ff fda0 	bl	80017d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c92:	f7ff f829 	bl	8000ce8 <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f825 	bl	8000ce8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e2d6      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cac:	f7ff fda0 	bl	80017f0 <LL_RCC_MSI_IsReady>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f1      	bne.n	8001c9a <HAL_RCC_OscConfig+0x11a>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cb8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d047      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc6:	f7ff fdf6 	bl	80018b6 <LL_RCC_GetSysClkSource>
 8001cca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ccc:	f7ff feef 	bl	8001aae <LL_RCC_PLL_GetMainSource>
 8001cd0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x164>
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d108      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d134      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e2b4      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_OscConfig+0x180>
 8001cfa:	f7ff fbdd 	bl	80014b8 <LL_RCC_HSE_Enable>
 8001cfe:	e001      	b.n	8001d04 <HAL_RCC_OscConfig+0x184>
 8001d00:	f7ff fbe9 	bl	80014d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d012      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe ffec 	bl	8000ce8 <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7fe ffe8 	bl	8000ce8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e299      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d26:	f7ff fbe5 	bl	80014f4 <LL_RCC_HSE_IsReady>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f1      	beq.n	8001d14 <HAL_RCC_OscConfig+0x194>
 8001d30:	e011      	b.n	8001d56 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe ffd9 	bl	8000ce8 <HAL_GetTick>
 8001d36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3a:	f7fe ffd5 	bl	8000ce8 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	@ 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e286      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d4c:	f7ff fbd2 	bl	80014f4 <LL_RCC_HSE_IsReady>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f1      	bne.n	8001d3a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	f7ff fda8 	bl	80018b6 <LL_RCC_GetSysClkSource>
 8001d66:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d68:	f7ff fea1 	bl	8001aae <LL_RCC_PLL_GetMainSource>
 8001d6c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_OscConfig+0x200>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d10e      	bne.n	8001d98 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e266      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fbf1 	bl	8001578 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d96:	e031      	b.n	8001dfc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d019      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	f7ff fbba 	bl	8001518 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe ffa0 	bl	8000ce8 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dac:	f7fe ff9c 	bl	8000ce8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e24d      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dbe:	f7ff fbc9 	bl	8001554 <LL_RCC_HSI_IsReady>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f1      	beq.n	8001dac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fbd3 	bl	8001578 <LL_RCC_HSI_SetCalibTrimming>
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd4:	f7ff fbaf 	bl	8001536 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe ff86 	bl	8000ce8 <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de0:	f7fe ff82 	bl	8000ce8 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e233      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001df2:	f7ff fbaf 	bl	8001554 <LL_RCC_HSI_IsReady>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f1      	bne.n	8001de0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a3 	beq.w	8001f5c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d076      	beq.n	8001f0c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d046      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001e2a:	f7ff fc66 	bl	80016fa <LL_RCC_LSI1_IsReady>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d113      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e34:	f7ff fc3f 	bl	80016b6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e38:	f7fe ff56 	bl	8000ce8 <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e40:	f7fe ff52 	bl	8000ce8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e203      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e52:	f7ff fc52 	bl	80016fa <LL_RCC_LSI1_IsReady>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f1      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001e5c:	f7ff fc5f 	bl	800171e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ff42 	bl	8000ce8 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e68:	f7fe ff3e 	bl	8000ce8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1ef      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e7a:	f7ff fc72 	bl	8001762 <LL_RCC_LSI2_IsReady>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f1      	beq.n	8001e68 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fc7c 	bl	8001786 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001e8e:	f7ff fc23 	bl	80016d8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe ff29 	bl	8000ce8 <HAL_GetTick>
 8001e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e9a:	f7fe ff25 	bl	8000ce8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1d6      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001eac:	f7ff fc25 	bl	80016fa <LL_RCC_LSI1_IsReady>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f1      	bne.n	8001e9a <HAL_RCC_OscConfig+0x31a>
 8001eb6:	e051      	b.n	8001f5c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001eb8:	f7ff fbfd 	bl	80016b6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ff14 	bl	8000ce8 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001ec2:	e00c      	b.n	8001ede <HAL_RCC_OscConfig+0x35e>
 8001ec4:	20000038 	.word	0x20000038
 8001ec8:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ecc:	f7fe ff0c 	bl	8000ce8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1bd      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001ede:	f7ff fc0c 	bl	80016fa <LL_RCC_LSI1_IsReady>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f1      	beq.n	8001ecc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001ee8:	f7ff fc2a 	bl	8001740 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001eee:	f7fe fefb 	bl	8000ce8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e1ac      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f00:	f7ff fc2f 	bl	8001762 <LL_RCC_LSI2_IsReady>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f1      	bne.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001f0a:	e027      	b.n	8001f5c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001f0c:	f7ff fc18 	bl	8001740 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7fe feea 	bl	8000ce8 <HAL_GetTick>
 8001f14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f18:	f7fe fee6 	bl	8000ce8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e197      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f2a:	f7ff fc1a 	bl	8001762 <LL_RCC_LSI2_IsReady>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f1      	bne.n	8001f18 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f34:	f7ff fbd0 	bl	80016d8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7fe fed6 	bl	8000ce8 <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f40:	f7fe fed2 	bl	8000ce8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e183      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f52:	f7ff fbd2 	bl	80016fa <LL_RCC_LSI1_IsReady>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f1      	bne.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d05b      	beq.n	8002020 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f68:	4ba7      	ldr	r3, [pc, #668]	@ (8002208 <HAL_RCC_OscConfig+0x688>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d114      	bne.n	8001f9e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f74:	f7ff fa70 	bl	8001458 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f78:	f7fe feb6 	bl	8000ce8 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7fe feb2 	bl	8000ce8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e163      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f92:	4b9d      	ldr	r3, [pc, #628]	@ (8002208 <HAL_RCC_OscConfig+0x688>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x42c>
 8001fa6:	f7ff fb30 	bl	800160a <LL_RCC_LSE_Enable>
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x446>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d104      	bne.n	8001fbe <HAL_RCC_OscConfig+0x43e>
 8001fb4:	f7ff fb4b 	bl	800164e <LL_RCC_LSE_EnableBypass>
 8001fb8:	f7ff fb27 	bl	800160a <LL_RCC_LSE_Enable>
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCC_OscConfig+0x446>
 8001fbe:	f7ff fb35 	bl	800162c <LL_RCC_LSE_Disable>
 8001fc2:	f7ff fb55 	bl	8001670 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d014      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7fe fe8b 	bl	8000ce8 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fe87 	bl	8000ce8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e136      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fec:	f7ff fb51 	bl	8001692 <LL_RCC_LSE_IsReady>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ef      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x456>
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fe76 	bl	8000ce8 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7fe fe72 	bl	8000ce8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e121      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002016:	f7ff fb3c 	bl	8001692 <LL_RCC_LSE_IsReady>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ef      	bne.n	8002000 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d02c      	beq.n	8002086 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d014      	beq.n	800205e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002034:	f7ff fab5 	bl	80015a2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe fe56 	bl	8000ce8 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002040:	f7fe fe52 	bl	8000ce8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e103      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002052:	f7ff fac8 	bl	80015e6 <LL_RCC_HSI48_IsReady>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f1      	beq.n	8002040 <HAL_RCC_OscConfig+0x4c0>
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800205e:	f7ff fab1 	bl	80015c4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7fe fe41 	bl	8000ce8 <HAL_GetTick>
 8002066:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206a:	f7fe fe3d 	bl	8000ce8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0ee      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800207c:	f7ff fab3 	bl	80015e6 <LL_RCC_HSI48_IsReady>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f1      	bne.n	800206a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80e4 	beq.w	8002258 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002090:	f7ff fc11 	bl	80018b6 <LL_RCC_GetSysClkSource>
 8002094:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	f040 80b4 	bne.w	8002210 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0203 	and.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d123      	bne.n	80020fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d11c      	bne.n	80020fe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d114      	bne.n	80020fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d10d      	bne.n	80020fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d05d      	beq.n	80021ba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d058      	beq.n	80021b6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0a1      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002116:	f7ff fc84 	bl	8001a22 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800211a:	f7fe fde5 	bl	8000ce8 <HAL_GetTick>
 800211e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fde1 	bl	8000ce8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e092      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1ef      	bne.n	8002122 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b30      	ldr	r3, [pc, #192]	@ (800220c <HAL_RCC_OscConfig+0x68c>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002154:	4311      	orrs	r1, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800215a:	0212      	lsls	r2, r2, #8
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800216e:	430a      	orrs	r2, r1
 8002170:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002178:	f7ff fc44 	bl	8001a04 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800218c:	f7fe fdac 	bl	8000ce8 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe fda8 	bl	8000ce8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e059      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ef      	beq.n	8002194 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b4:	e050      	b.n	8002258 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e04f      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d147      	bne.n	8002258 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c8:	f7ff fc1c 	bl	8001a04 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021dc:	f7fe fd84 	bl	8000ce8 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fd80 	bl	8000ce8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e031      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ef      	beq.n	80021e4 <HAL_RCC_OscConfig+0x664>
 8002204:	e028      	b.n	8002258 <HAL_RCC_OscConfig+0x6d8>
 8002206:	bf00      	nop
 8002208:	58000400 	.word	0x58000400
 800220c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d01e      	beq.n	8002254 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	f7ff fc04 	bl	8001a22 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fd65 	bl	8000ce8 <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fd61 	bl	8000ce8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e012      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ef      	bne.n	8002222 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x6e4>)
 800224e:	4013      	ands	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]
 8002252:	e001      	b.n	8002258 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3734      	adds	r7, #52	@ 0x34
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	eefefffc 	.word	0xeefefffc

08002268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e12d      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b98      	ldr	r3, [pc, #608]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d91b      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b95      	ldr	r3, [pc, #596]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4993      	ldr	r1, [pc, #588]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800229a:	f7fe fd25 	bl	8000ce8 <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022a2:	f7fe fd21 	bl	8000ce8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e111      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b4:	4b8a      	ldr	r3, [pc, #552]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d1ef      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fafb 	bl	80018ce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fd06 	bl	8000ce8 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022e0:	f7fe fd02 	bl	8000ce8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0f2      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022f2:	f7ff fbe8 	bl	8001ac6 <LL_RCC_IsActiveFlag_HPRE>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f1      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d016      	beq.n	8002336 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff faf2 	bl	80018f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002312:	f7fe fce9 	bl	8000ce8 <HAL_GetTick>
 8002316:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800231a:	f7fe fce5 	bl	8000ce8 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0d5      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800232c:	f7ff fbdd 	bl	8001aea <LL_RCC_IsActiveFlag_C2HPRE>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f1      	beq.n	800231a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff faeb 	bl	8001922 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800234c:	f7fe fccc 	bl	8000ce8 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002354:	f7fe fcc8 	bl	8000ce8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0b8      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002366:	f7ff fbd3 	bl	8001b10 <LL_RCC_IsActiveFlag_SHDHPRE>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f1      	beq.n	8002354 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d016      	beq.n	80023aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fae5 	bl	8001950 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002386:	f7fe fcaf 	bl	8000ce8 <HAL_GetTick>
 800238a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800238e:	f7fe fcab 	bl	8000ce8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e09b      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023a0:	f7ff fbc9 	bl	8001b36 <LL_RCC_IsActiveFlag_PPRE1>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f1      	beq.n	800238e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d017      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fadb 	bl	8001978 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023c2:	f7fe fc91 	bl	8000ce8 <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ca:	f7fe fc8d 	bl	8000ce8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e07d      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023dc:	f7ff fbbd 	bl	8001b5a <LL_RCC_IsActiveFlag_PPRE2>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f1      	beq.n	80023ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d043      	beq.n	800247a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80023fa:	f7ff f87b 	bl	80014f4 <LL_RCC_HSE_IsReady>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11e      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e067      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d106      	bne.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002410:	f7ff fb16 	bl	8001a40 <LL_RCC_PLL_IsReady>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d113      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e05c      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002426:	f7ff f9e3 	bl	80017f0 <LL_RCC_MSI_IsReady>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e051      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002434:	f7ff f88e 	bl	8001554 <LL_RCC_HSI_IsReady>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e04a      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fa21 	bl	800188e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244c:	f7fe fc4c 	bl	8000ce8 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fc48 	bl	8000ce8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e036      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	f7ff fa24 	bl	80018b6 <LL_RCC_GetSysClkSource>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	429a      	cmp	r2, r3
 8002478:	d1ec      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247a:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d21b      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002488:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 0207 	bic.w	r2, r3, #7
 8002490:	4913      	ldr	r1, [pc, #76]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fc26 	bl	8000ce8 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024a0:	f7fe fc22 	bl	8000ce8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e012      	b.n	80024d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_RCC_ClockConfig+0x278>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1ef      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024c0:	f000 f87e 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_RCC_ClockConfig+0x27c>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80024ca:	f7fe fc19 	bl	8000d00 <HAL_GetTickPrio>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fbbb 	bl	8000c4c <HAL_InitTick>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58004000 	.word	0x58004000
 80024e4:	20000038 	.word	0x20000038

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ee:	f7ff f9e2 	bl	80018b6 <LL_RCC_GetSysClkSource>
 80024f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80024fa:	f7ff f99e 	bl	800183a <LL_RCC_MSI_GetRange>
 80024fe:	4603      	mov	r3, r0
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e04b      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d102      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002516:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	e045      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d10a      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002522:	f7fe ffb7 	bl	8001494 <LL_RCC_HSE_IsEnabledDiv2>
 8002526:	4603      	mov	r3, r0
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800252c:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	e03a      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e037      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002538:	f7ff fab9 	bl	8001aae <LL_RCC_PLL_GetMainSource>
 800253c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d003      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x64>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d003      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x6a>
 800254a:	e00d      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800254e:	60bb      	str	r3, [r7, #8]
        break;
 8002550:	e015      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002552:	f7fe ff9f 	bl	8001494 <LL_RCC_HSE_IsEnabledDiv2>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800255e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002560:	e00d      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002562:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002564:	60bb      	str	r3, [r7, #8]
        break;
 8002566:	e00a      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002568:	f7ff f967 	bl	800183a <LL_RCC_MSI_GetRange>
 800256c:	4603      	mov	r3, r0
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4a0f      	ldr	r2, [pc, #60]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	60bb      	str	r3, [r7, #8]
        break;
 800257c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800257e:	f7ff fa71 	bl	8001a64 <LL_RCC_PLL_GetN>
 8002582:	4602      	mov	r2, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	fb03 f402 	mul.w	r4, r3, r2
 800258a:	f7ff fa84 	bl	8001a96 <LL_RCC_PLL_GetDivider>
 800258e:	4603      	mov	r3, r0
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	3301      	adds	r3, #1
 8002594:	fbb4 f4f3 	udiv	r4, r4, r3
 8002598:	f7ff fa71 	bl	8001a7e <LL_RCC_PLL_GetR>
 800259c:	4603      	mov	r3, r0
 800259e:	0f5b      	lsrs	r3, r3, #29
 80025a0:	3301      	adds	r3, #1
 80025a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80025a6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	08003af8 	.word	0x08003af8
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	01e84800 	.word	0x01e84800

080025c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b598      	push	{r3, r4, r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80025c4:	f7ff ff90 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80025c8:	4604      	mov	r4, r0
 80025ca:	f7ff f9e9 	bl	80019a0 <LL_RCC_GetAHBPrescaler>
 80025ce:	4603      	mov	r3, r0
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a03      	ldr	r2, [pc, #12]	@ (80025e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd98      	pop	{r3, r4, r7, pc}
 80025e4:	08003a98 	.word	0x08003a98

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b598      	push	{r3, r4, r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025ec:	f7ff ffe8 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025f0:	4604      	mov	r4, r0
 80025f2:	f7ff f9ef 	bl	80019d4 <LL_RCC_GetAPB1Prescaler>
 80025f6:	4603      	mov	r3, r0
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa24 f303 	lsr.w	r3, r4, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd98      	pop	{r3, r4, r7, pc}
 8002610:	08003ad8 	.word	0x08003ad8

08002614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002614:	b598      	push	{r3, r4, r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002618:	f7ff ffd2 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 800261c:	4604      	mov	r4, r0
 800261e:	f7ff f9e5 	bl	80019ec <LL_RCC_GetAPB2Prescaler>
 8002622:	4603      	mov	r3, r0
 8002624:	0adb      	lsrs	r3, r3, #11
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	4a04      	ldr	r2, [pc, #16]	@ (800263c <HAL_RCC_GetPCLK2Freq+0x28>)
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd98      	pop	{r3, r4, r7, pc}
 800263c:	08003ad8 	.word	0x08003ad8

08002640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2bb0      	cmp	r3, #176	@ 0xb0
 800264c:	d903      	bls.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e007      	b.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002666:	f7ff f9a7 	bl	80019b8 <LL_RCC_GetAHB4Prescaler>
 800266a:	4603      	mov	r3, r0
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0c9c      	lsrs	r4, r3, #18
 800268a:	f7fe fef5 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 800268e:	4603      	mov	r3, r0
 8002690:	4619      	mov	r1, r3
 8002692:	4620      	mov	r0, r4
 8002694:	f000 f80c 	bl	80026b0 <RCC_SetFlashLatency>
 8002698:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08003af8 	.word	0x08003af8
 80026a8:	08003a98 	.word	0x08003a98
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b093      	sub	sp, #76	@ 0x4c
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <RCC_SetFlashLatency+0xe8>)
 80026bc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80026c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80026c6:	4a35      	ldr	r2, [pc, #212]	@ (800279c <RCC_SetFlashLatency+0xec>)
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80026d2:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <RCC_SetFlashLatency+0xf0>)
 80026d4:	f107 040c 	add.w	r4, r7, #12
 80026d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80026de:	2300      	movs	r3, #0
 80026e0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e8:	d11a      	bne.n	8002720 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80026ee:	e013      	b.n	8002718 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80026f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	3348      	adds	r3, #72	@ 0x48
 80026f6:	443b      	add	r3, r7
 80026f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d807      	bhi.n	8002712 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3348      	adds	r3, #72	@ 0x48
 8002708:	443b      	add	r3, r7
 800270a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800270e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002710:	e020      	b.n	8002754 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002714:	3301      	adds	r3, #1
 8002716:	643b      	str	r3, [r7, #64]	@ 0x40
 8002718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800271a:	2b03      	cmp	r3, #3
 800271c:	d9e8      	bls.n	80026f0 <RCC_SetFlashLatency+0x40>
 800271e:	e019      	b.n	8002754 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002720:	2300      	movs	r3, #0
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002724:	e013      	b.n	800274e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	3348      	adds	r3, #72	@ 0x48
 800272c:	443b      	add	r3, r7
 800272e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	d807      	bhi.n	8002748 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	3348      	adds	r3, #72	@ 0x48
 800273e:	443b      	add	r3, r7
 8002740:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002744:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002746:	e005      	b.n	8002754 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274a:	3301      	adds	r3, #1
 800274c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800274e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002750:	2b02      	cmp	r3, #2
 8002752:	d9e8      	bls.n	8002726 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <RCC_SetFlashLatency+0xf4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 0207 	bic.w	r2, r3, #7
 800275c:	4911      	ldr	r1, [pc, #68]	@ (80027a4 <RCC_SetFlashLatency+0xf4>)
 800275e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002764:	f7fe fac0 	bl	8000ce8 <HAL_GetTick>
 8002768:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800276a:	e008      	b.n	800277e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800276c:	f7fe fabc 	bl	8000ce8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e007      	b.n	800278e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <RCC_SetFlashLatency+0xf4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002788:	429a      	cmp	r2, r3
 800278a:	d1ef      	bne.n	800276c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	374c      	adds	r7, #76	@ 0x4c
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	08003a6c 	.word	0x08003a6c
 800279c:	08003a7c 	.word	0x08003a7c
 80027a0:	08003a88 	.word	0x08003a88
 80027a4:	58004000 	.word	0x58004000

080027a8 <LL_RCC_LSE_IsEnabled>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <LL_RCC_LSE_IsEnabled+0x18>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <LL_RCC_LSE_IsEnabled+0x1a>
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_RCC_LSE_IsReady>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d101      	bne.n	80027e4 <LL_RCC_LSE_IsReady+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_RCC_LSE_IsReady+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_RCC_MSI_EnablePLLMode>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_RCC_SetRFWKPClockSource>:
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002822:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_RCC_SetSMPSClockSource>:
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4313      	orrs	r3, r2
 8002854:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_RCC_SetSMPSPrescaler>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4313      	orrs	r3, r2
 800287c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_RCC_SetUSARTClockSource>:
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_SetLPUARTClockSource>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_SetI2CClockSource>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80028fa:	43db      	mvns	r3, r3
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002906:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_RCC_SetLPTIMClockSource>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002928:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_RCC_SetSAIClockSource>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002960:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetRNGClockSource>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_SetCLK48ClockSource>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_SetUSBClockSource>:
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ffe3 	bl	80029a8 <LL_RCC_SetCLK48ClockSource>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <LL_RCC_SetADCClockSource>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_SetRTCClockSource>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_GetRTCClockSource>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_ForceBackupDomainReset>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_PLLSAI1_Enable>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_RCC_PLLSAI1_Disable>:
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002acc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ad0:	6013      	str	r3, [r2, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_PLLSAI1_IsReady>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aee:	d101      	bne.n	8002af4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d034      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b24:	d021      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b2a:	d81b      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b30:	d01d      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002b32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b36:	d815      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b40:	d110      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b50:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b52:	e00d      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f94d 	bl	8002df8 <RCCEx_PLLSAI1_ConfigNP>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b62:	e005      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	77fb      	strb	r3, [r7, #31]
        break;
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fee8 	bl	8002950 <LL_RCC_SetSAIClockSource>
 8002b80:	e001      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
 8002b84:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d046      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002b92:	f7ff ff56 	bl	8002a42 <LL_RCC_GetRTCClockSource>
 8002b96:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d03c      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ba2:	f7fe fc59 	bl	8001458 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff30 	bl	8002a16 <LL_RCC_SetRTCClockSource>
 8002bb6:	e02e      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002bc2:	f7ff ff4b 	bl	8002a5c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002bc6:	f7ff ff5a 	bl	8002a7e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002be2:	f7ff fde1 	bl	80027a8 <LL_RCC_LSE_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d114      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bec:	f7fe f87c 	bl	8000ce8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe f878 	bl	8000ce8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d902      	bls.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	77fb      	strb	r3, [r7, #31]
              break;
 8002c0a:	e004      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c0c:	f7ff fdde 	bl	80027cc <LL_RCC_LSE_IsReady>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
 8002c18:	77bb      	strb	r3, [r7, #30]
 8002c1a:	e001      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
 8002c1e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe2a 	bl	800288a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fe35 	bl	80028b6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fe5d 	bl	800291c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fe52 	bl	800291c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fe2a 	bl	80028e2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fe1f 	bl	80028e2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe8d 	bl	80029d4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f8e3 	bl	8002eae <RCCEx_PLLSAI1_ConfigNQ>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02b      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d14:	d003      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fe2a 	bl	800297c <LL_RCC_SetRNGClockSource>
 8002d28:	e00a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7ff fe21 	bl	800297c <LL_RCC_SetRNGClockSource>
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff fe34 	bl	80029a8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002d48:	d107      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d022      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe3d 	bl	80029ea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d78:	d107      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d88:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d92:	d10b      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f8e3 	bl	8002f64 <RCCEx_PLLSAI1_ConfigNR>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fd26 	bl	800280e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fd45 	bl	8002862 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd2c 	bl	800283a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002de2:	7fbb      	ldrb	r3, [r7, #30]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002df0:	f7ff fcfe 	bl	80027f0 <LL_RCC_MSI_EnablePLLMode>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e04:	f7ff fe5b 	bl	8002abe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e08:	f7fd ff6e 	bl	8000ce8 <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e0e:	e009      	b.n	8002e24 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e10:	f7fd ff6a 	bl	8000ce8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	73fb      	strb	r3, [r7, #15]
      break;
 8002e22:	e004      	b.n	8002e2e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e24:	f7ff fe5a 	bl	8002adc <LL_RCC_PLLSAI1_IsReady>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d137      	bne.n	8002ea4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e62:	f7ff fe1d 	bl	8002aa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e66:	f7fd ff3f 	bl	8000ce8 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e6c:	e009      	b.n	8002e82 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6e:	f7fd ff3b 	bl	8000ce8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d902      	bls.n	8002e82 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e80:	e004      	b.n	8002e8c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e82:	f7ff fe2b 	bl	8002adc <LL_RCC_PLLSAI1_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1f0      	bne.n	8002e6e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002eba:	f7ff fe00 	bl	8002abe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ebe:	f7fd ff13 	bl	8000ce8 <HAL_GetTick>
 8002ec2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ec4:	e009      	b.n	8002eda <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec6:	f7fd ff0f 	bl	8000ce8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d902      	bls.n	8002eda <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e004      	b.n	8002ee4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002eda:	f7ff fdff 	bl	8002adc <LL_RCC_PLLSAI1_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d137      	bne.n	8002f5a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f14:	4313      	orrs	r3, r2
 8002f16:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f18:	f7ff fdc2 	bl	8002aa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fd fee4 	bl	8000ce8 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fd fee0 	bl	8000ce8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e004      	b.n	8002f42 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f38:	f7ff fdd0 	bl	8002adc <LL_RCC_PLLSAI1_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d1f0      	bne.n	8002f24 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d108      	bne.n	8002f5a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f70:	f7ff fda5 	bl	8002abe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f74:	f7fd feb8 	bl	8000ce8 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f7a:	e009      	b.n	8002f90 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f7c:	f7fd feb4 	bl	8000ce8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8e:	e004      	b.n	8002f9a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f90:	f7ff fda4 	bl	8002adc <LL_RCC_PLLSAI1_IsReady>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d137      	bne.n	8003010 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fce:	f7ff fd67 	bl	8002aa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fd fe89 	bl	8000ce8 <HAL_GetTick>
 8002fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fd8:	e009      	b.n	8002fee <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fda:	f7fd fe85 	bl	8000ce8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d902      	bls.n	8002fee <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	73fb      	strb	r3, [r7, #15]
        break;
 8002fec:	e004      	b.n	8002ff8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fee:	f7ff fd75 	bl	8002adc <LL_RCC_PLLSAI1_IsReady>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d1f0      	bne.n	8002fda <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800300c:	4313      	orrs	r3, r2
 800300e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <LL_RCC_GetUSARTClockSource>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003026:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4013      	ands	r3, r2
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_GetLPUARTClockSource>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003046:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4013      	ands	r3, r2
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e042      	b.n	80030f2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fc92 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	@ 0x24
 8003088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fa51 	bl	800354c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f826 	bl	80030fc <UART_SetConfig>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01b      	b.n	80030f2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fad0 	bl	8003690 <UART_CheckIdleState>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b08c      	sub	sp, #48	@ 0x30
 8003102:	af00      	add	r7, sp, #0
 8003104:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4baf      	ldr	r3, [pc, #700]	@ (80033e8 <UART_SetConfig+0x2ec>)
 800312c:	4013      	ands	r3, r2
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa4      	ldr	r2, [pc, #656]	@ (80033ec <UART_SetConfig+0x2f0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	4313      	orrs	r3, r2
 8003166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a95      	ldr	r2, [pc, #596]	@ (80033f0 <UART_SetConfig+0x2f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d125      	bne.n	80031ec <UART_SetConfig+0xf0>
 80031a0:	2003      	movs	r0, #3
 80031a2:	f7ff ff3a 	bl	800301a <LL_RCC_GetUSARTClockSource>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d81b      	bhi.n	80031e4 <UART_SetConfig+0xe8>
 80031ac:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <UART_SetConfig+0xb8>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031dd 	.word	0x080031dd
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ca:	e042      	b.n	8003252 <UART_SetConfig+0x156>
 80031cc:	2302      	movs	r3, #2
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d2:	e03e      	b.n	8003252 <UART_SetConfig+0x156>
 80031d4:	2304      	movs	r3, #4
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031da:	e03a      	b.n	8003252 <UART_SetConfig+0x156>
 80031dc:	2308      	movs	r3, #8
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e2:	e036      	b.n	8003252 <UART_SetConfig+0x156>
 80031e4:	2310      	movs	r3, #16
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ea:	e032      	b.n	8003252 <UART_SetConfig+0x156>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a7e      	ldr	r2, [pc, #504]	@ (80033ec <UART_SetConfig+0x2f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d12a      	bne.n	800324c <UART_SetConfig+0x150>
 80031f6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80031fa:	f7ff ff1e 	bl	800303a <LL_RCC_GetLPUARTClockSource>
 80031fe:	4603      	mov	r3, r0
 8003200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003204:	d01a      	beq.n	800323c <UART_SetConfig+0x140>
 8003206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800320a:	d81b      	bhi.n	8003244 <UART_SetConfig+0x148>
 800320c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003210:	d00c      	beq.n	800322c <UART_SetConfig+0x130>
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003216:	d815      	bhi.n	8003244 <UART_SetConfig+0x148>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <UART_SetConfig+0x128>
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	d008      	beq.n	8003234 <UART_SetConfig+0x138>
 8003222:	e00f      	b.n	8003244 <UART_SetConfig+0x148>
 8003224:	2300      	movs	r3, #0
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322a:	e012      	b.n	8003252 <UART_SetConfig+0x156>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e00e      	b.n	8003252 <UART_SetConfig+0x156>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323a:	e00a      	b.n	8003252 <UART_SetConfig+0x156>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003242:	e006      	b.n	8003252 <UART_SetConfig+0x156>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324a:	e002      	b.n	8003252 <UART_SetConfig+0x156>
 800324c:	2310      	movs	r3, #16
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a65      	ldr	r2, [pc, #404]	@ (80033ec <UART_SetConfig+0x2f0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	f040 8097 	bne.w	800338c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800325e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003262:	2b08      	cmp	r3, #8
 8003264:	d823      	bhi.n	80032ae <UART_SetConfig+0x1b2>
 8003266:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <UART_SetConfig+0x170>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	08003291 	.word	0x08003291
 8003270:	080032af 	.word	0x080032af
 8003274:	08003299 	.word	0x08003299
 8003278:	080032af 	.word	0x080032af
 800327c:	0800329f 	.word	0x0800329f
 8003280:	080032af 	.word	0x080032af
 8003284:	080032af 	.word	0x080032af
 8003288:	080032af 	.word	0x080032af
 800328c:	080032a7 	.word	0x080032a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7ff f9aa 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8003294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003296:	e010      	b.n	80032ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003298:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <UART_SetConfig+0x2f8>)
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800329c:	e00d      	b.n	80032ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329e:	f7ff f923 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80032a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032a4:	e009      	b.n	80032ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032ac:	e005      	b.n	80032ba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 812b 	beq.w	8003518 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <UART_SetConfig+0x2fc>)
 80032c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032cc:	461a      	mov	r2, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d305      	bcc.n	80032f2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d903      	bls.n	80032fa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032f8:	e10e      	b.n	8003518 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	2200      	movs	r2, #0
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	60fa      	str	r2, [r7, #12]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	4a3c      	ldr	r2, [pc, #240]	@ (80033f8 <UART_SetConfig+0x2fc>)
 8003308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330c:	b29b      	uxth	r3, r3
 800330e:	2200      	movs	r2, #0
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003318:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800331c:	f7fc ff2e 	bl	800017c <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	020b      	lsls	r3, r1, #8
 8003332:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003336:	0202      	lsls	r2, r0, #8
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	6849      	ldr	r1, [r1, #4]
 800333c:	0849      	lsrs	r1, r1, #1
 800333e:	2000      	movs	r0, #0
 8003340:	460c      	mov	r4, r1
 8003342:	4605      	mov	r5, r0
 8003344:	eb12 0804 	adds.w	r8, r2, r4
 8003348:	eb43 0905 	adc.w	r9, r3, r5
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	469a      	mov	sl, r3
 8003354:	4693      	mov	fp, r2
 8003356:	4652      	mov	r2, sl
 8003358:	465b      	mov	r3, fp
 800335a:	4640      	mov	r0, r8
 800335c:	4649      	mov	r1, r9
 800335e:	f7fc ff0d 	bl	800017c <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4613      	mov	r3, r2
 8003368:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003370:	d308      	bcc.n	8003384 <UART_SetConfig+0x288>
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003378:	d204      	bcs.n	8003384 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	e0c9      	b.n	8003518 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800338a:	e0c5      	b.n	8003518 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003394:	d16d      	bne.n	8003472 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003396:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800339a:	3b01      	subs	r3, #1
 800339c:	2b07      	cmp	r3, #7
 800339e:	d82d      	bhi.n	80033fc <UART_SetConfig+0x300>
 80033a0:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <UART_SetConfig+0x2ac>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033c9 	.word	0x080033c9
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033fd 	.word	0x080033fd
 80033b4:	080033d7 	.word	0x080033d7
 80033b8:	080033fd 	.word	0x080033fd
 80033bc:	080033fd 	.word	0x080033fd
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	080033df 	.word	0x080033df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7ff f924 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 80033cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ce:	e01b      	b.n	8003408 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <UART_SetConfig+0x2f8>)
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033d4:	e018      	b.n	8003408 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7ff f887 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80033da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033dc:	e014      	b.n	8003408 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e4:	e010      	b.n	8003408 <UART_SetConfig+0x30c>
 80033e6:	bf00      	nop
 80033e8:	cfff69f3 	.word	0xcfff69f3
 80033ec:	40008000 	.word	0x40008000
 80033f0:	40013800 	.word	0x40013800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	08003b38 	.word	0x08003b38
      default:
        pclk = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003406:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8084 	beq.w	8003518 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	4a4b      	ldr	r2, [pc, #300]	@ (8003544 <UART_SetConfig+0x448>)
 8003416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800341a:	461a      	mov	r2, r3
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003422:	005a      	lsls	r2, r3, #1
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	441a      	add	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b0f      	cmp	r3, #15
 800343a:	d916      	bls.n	800346a <UART_SetConfig+0x36e>
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003442:	d212      	bcs.n	800346a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f023 030f 	bic.w	r3, r3, #15
 800344c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	b29b      	uxth	r3, r3
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	b29a      	uxth	r2, r3
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	4313      	orrs	r3, r2
 800345e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	8bfa      	ldrh	r2, [r7, #30]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	e056      	b.n	8003518 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003470:	e052      	b.n	8003518 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003476:	3b01      	subs	r3, #1
 8003478:	2b07      	cmp	r3, #7
 800347a:	d822      	bhi.n	80034c2 <UART_SetConfig+0x3c6>
 800347c:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <UART_SetConfig+0x388>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034a5 	.word	0x080034a5
 8003488:	080034ad 	.word	0x080034ad
 800348c:	080034c3 	.word	0x080034c3
 8003490:	080034b3 	.word	0x080034b3
 8003494:	080034c3 	.word	0x080034c3
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034c3 	.word	0x080034c3
 80034a0:	080034bb 	.word	0x080034bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7ff f8b6 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034aa:	e010      	b.n	80034ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ac:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <UART_SetConfig+0x44c>)
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034b0:	e00d      	b.n	80034ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b2:	f7ff f819 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80034b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034b8:	e009      	b.n	80034ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034c0:	e005      	b.n	80034ce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034cc:	bf00      	nop
    }

    if (pclk != 0U)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d021      	beq.n	8003518 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <UART_SetConfig+0x448>)
 80034da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034de:	461a      	mov	r2, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	441a      	add	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d909      	bls.n	8003512 <UART_SetConfig+0x416>
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003504:	d205      	bcs.n	8003512 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	b29a      	uxth	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	e002      	b.n	8003518 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2201      	movs	r2, #1
 800351c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2201      	movs	r2, #1
 8003524:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2200      	movs	r2, #0
 800352c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003534:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003538:	4618      	mov	r0, r3
 800353a:	3730      	adds	r7, #48	@ 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	08003b38 	.word	0x08003b38
 8003548:	00f42400 	.word	0x00f42400

0800354c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01a      	beq.n	8003662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800364a:	d10a      	bne.n	8003662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b098      	sub	sp, #96	@ 0x60
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a0:	f7fd fb22 	bl	8000ce8 <HAL_GetTick>
 80036a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d12f      	bne.n	8003714 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036bc:	2200      	movs	r2, #0
 80036be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f88e 	bl	80037e4 <UART_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d022      	beq.n	8003714 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e6      	bne.n	80036ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e063      	b.n	80037dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d149      	bne.n	80037b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003722:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	2200      	movs	r2, #0
 800372c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f857 	bl	80037e4 <UART_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03c      	beq.n	80037b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	623b      	str	r3, [r7, #32]
   return(result);
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
 800375c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e6      	bne.n	800373c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	60fb      	str	r3, [r7, #12]
   return(result);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3308      	adds	r3, #8
 800378c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800378e:	61fa      	str	r2, [r7, #28]
 8003790:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	617b      	str	r3, [r7, #20]
   return(result);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e5      	bne.n	800376e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e012      	b.n	80037dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3758      	adds	r7, #88	@ 0x58
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f4:	e04f      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d04b      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fd fa73 	bl	8000ce8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <UART_WaitOnFlagUntilTimeout+0x30>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e04e      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d037      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b80      	cmp	r3, #128	@ 0x80
 800382a:	d034      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0xb2>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d031      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d110      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2208      	movs	r2, #8
 8003846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f838 	bl	80038be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2208      	movs	r2, #8
 8003852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e029      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800386c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003870:	d111      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800387a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f81e 	bl	80038be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e00f      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d0a0      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038be:	b480      	push	{r7}
 80038c0:	b095      	sub	sp, #84	@ 0x54
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e6      	bne.n	80038c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	61fb      	str	r3, [r7, #28]
   return(result);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3308      	adds	r3, #8
 800391a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800391c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e3      	bne.n	80038f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d118      	bne.n	800396a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	60bb      	str	r3, [r7, #8]
   return(result);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	647b      	str	r3, [r7, #68]	@ 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	613b      	str	r3, [r7, #16]
   return(result);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e6      	bne.n	8003938 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800397e:	bf00      	nop
 8003980:	3754      	adds	r7, #84	@ 0x54
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003992:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003996:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4013      	ands	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	1d3b      	adds	r3, r7, #4
 80039ca:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <memset>:
 80039fc:	4402      	add	r2, r0
 80039fe:	4603      	mov	r3, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a44 <__libc_init_array+0x38>)
 8003a10:	4c0d      	ldr	r4, [pc, #52]	@ (8003a48 <__libc_init_array+0x3c>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	2600      	movs	r6, #0
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a4c <__libc_init_array+0x40>)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a50 <__libc_init_array+0x44>)
 8003a20:	f000 f818 	bl	8003a54 <_init>
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	2600      	movs	r6, #0
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08003b58 	.word	0x08003b58
 8003a48:	08003b58 	.word	0x08003b58
 8003a4c:	08003b58 	.word	0x08003b58
 8003a50:	08003b5c 	.word	0x08003b5c

08003a54 <_init>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr

08003a60 <_fini>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr
