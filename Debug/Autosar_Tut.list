
Autosar_Tut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  20000008  08004af4  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f4  20000018  08004b04  00006018  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000040c  08004b04  0000640c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b49  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b2d  00000000  00000000  0001bb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001660  00000000  00000000  0001e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001108  00000000  00000000  0001fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000228fc  00000000  00000000  00020e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013f87  00000000  00000000  00043724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e3714  00000000  00000000  000576ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0013adbf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005edc  00000000  00000000  0013ae04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00140ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000018 	.word	0x20000018
 8000158:	00000000 	.word	0x00000000
 800015c:	080049d8 	.word	0x080049d8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000001c 	.word	0x2000001c
 8000178:	080049d8 	.word	0x080049d8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800047c:	f023 0218 	bic.w	r2, r3, #24
 8000480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4313      	orrs	r3, r2
 8000488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4013      	ands	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004bc:	68fb      	ldr	r3, [r7, #12]
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <main>:

uint8_t MemoryPushB = 1;


int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  HAL_Init();
 80004d0:	f000 fbbc 	bl	8000c4c <HAL_Init>
  SystemClock_Config();
 80004d4:	f000 f838 	bl	8000548 <SystemClock_Config>
  PeriphCommonClock_Config();
 80004d8:	f000 f8ac 	bl	8000634 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80004dc:	f000 f9b8 	bl	8000850 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f940 	bl	8000764 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004e4:	f000 f98c 	bl	8000800 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80004e8:	f000 f8d6 	bl	8000698 <MX_ADC1_Init>


  while (1)
  {

	  	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&& MemoryPushB == 1)
 80004ec:	2110      	movs	r1, #16
 80004ee:	4813      	ldr	r0, [pc, #76]	@ (800053c <main+0x70>)
 80004f0:	f001 fd48 	bl	8001f84 <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d00c      	beq.n	8000514 <main+0x48>
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <main+0x74>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d108      	bne.n	8000514 <main+0x48>
	  	    {
	  	      HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	480f      	ldr	r0, [pc, #60]	@ (8000544 <main+0x78>)
 8000508:	f001 fd54 	bl	8001fb4 <HAL_GPIO_WritePin>
	  	      MemoryPushB = 0 ;
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <main+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
 8000512:	e00f      	b.n	8000534 <main+0x68>
	  	    }
	  	    else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && MemoryPushB == 0)
 8000514:	2110      	movs	r1, #16
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <main+0x70>)
 8000518:	f001 fd34 	bl	8001f84 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <main+0x68>
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <main+0x74>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d104      	bne.n	8000534 <main+0x68>
	  	    {
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	2120      	movs	r1, #32
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <main+0x78>)
 8000530:	f001 fd40 	bl	8001fb4 <HAL_GPIO_WritePin>

	  	    }


	  	    HAL_Delay(50);
 8000534:	2032      	movs	r0, #50	@ 0x32
 8000536:	f000 fc0f 	bl	8000d58 <HAL_Delay>
	  	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&& MemoryPushB == 1)
 800053a:	e7d7      	b.n	80004ec <main+0x20>
 800053c:	48000800 	.word	0x48000800
 8000540:	20000008 	.word	0x20000008
 8000544:	48000400 	.word	0x48000400

08000548 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09a      	sub	sp, #104	@ 0x68
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2248      	movs	r2, #72	@ 0x48
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fa11 	bl	800497e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	619a      	str	r2, [r3, #24]

  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800057c:	60d3      	str	r3, [r2, #12]

  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	f023 0303 	bic.w	r3, r3, #3
 8000588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	60d3      	str	r3, [r2, #12]
  	  HAL_PWR_EnableBkUpAccess();
 8000592:	f001 fe1f 	bl	80021d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff68 	bl	800046c <LL_RCC_LSE_SetDriveCapability>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <SystemClock_Config+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <SystemClock_Config+0xe8>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <SystemClock_Config+0xe8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80005b8:	2327      	movs	r3, #39	@ 0x27
 80005ba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2340      	movs	r3, #64	@ 0x40
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d8:	2360      	movs	r3, #96	@ 0x60
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 f989 	bl	80028fc <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005f0:	f000 f976 	bl	80008e0 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005f4:	236f      	movs	r3, #111	@ 0x6f
 80005f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fce5 	bl	8002fe4 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000620:	f000 f95e 	bl	80008e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000624:	f003 faa0 	bl	8003b68 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000628:	bf00      	nop
 800062a:	3768      	adds	r7, #104	@ 0x68
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	58000400 	.word	0x58000400

08000634 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2250      	movs	r2, #80	@ 0x50
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f99c 	bl	800497e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000646:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800064c:	2318      	movs	r3, #24
 800064e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000656:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800065c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000660:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000662:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8000666:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000668:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800066c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800066e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000678:	2300      	movs	r3, #0
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4618      	mov	r0, r3
 8000680:	f003 f8fc 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800068a:	f000 f929 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006b0:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <MX_ADC1_Init+0xc0>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006cc:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070e:	4811      	ldr	r0, [pc, #68]	@ (8000754 <MX_ADC1_Init+0xbc>)
 8000710:	f000 fcd2 	bl	80010b8 <HAL_ADC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800071a:	f000 f8e1 	bl	80008e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_ADC1_Init+0xc4>)
 8000720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000722:	2306      	movs	r3, #6
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_ADC1_Init+0xc8>)
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072e:	2304      	movs	r3, #4
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_ADC1_Init+0xbc>)
 800073c:	f000 fe08 	bl	8001350 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000746:	f000 f8cb 	bl	80008e0 <Error_Handler>
  }

}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000034 	.word	0x20000034
 8000758:	50040000 	.word	0x50040000
 800075c:	04300002 	.word	0x04300002
 8000760:	407f0000 	.word	0x407f0000

08000764 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 800076a:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <MX_USART1_UART_Init+0x98>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 8000778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800077c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800078a:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 800078c:	220c      	movs	r2, #12
 800078e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 80007b0:	f003 fb11 	bl	8003dd6 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80007ba:	f000 f891 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 80007c2:	f003 ffd9 	bl	8004778 <HAL_UARTEx_SetTxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80007cc:	f000 f888 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 80007d4:	f004 f80e 	bl	80047f4 <HAL_UARTEx_SetRxFifoThreshold>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80007de:	f000 f87f 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART1_UART_Init+0x94>)
 80007e4:	f003 ff8f 	bl	8004706 <HAL_UARTEx_DisableFifoMode>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80007ee:	f000 f877 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000098 	.word	0x20000098
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000804:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000806:	4a11      	ldr	r2, [pc, #68]	@ (800084c <MX_USB_PCD_Init+0x4c>)
 8000808:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 800080c:	2208      	movs	r2, #8
 800080e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000812:	2202      	movs	r2, #2
 8000814:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000818:	2202      	movs	r2, #2
 800081a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 800081e:	2200      	movs	r2, #0
 8000820:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000824:	2200      	movs	r2, #0
 8000826:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 800082a:	2200      	movs	r2, #0
 800082c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000830:	2200      	movs	r2, #0
 8000832:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000836:	f001 fbd5 	bl	8001fe4 <HAL_PCD_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000840:	f000 f84e 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000012c 	.word	0x2000012c
 800084c:	40006800 	.word	0x40006800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000864:	2004      	movs	r0, #4
 8000866:	f7ff fe17 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fe14 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff fe11 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2008      	movs	r0, #8
 8000878:	f7ff fe0e 	bl	8000498 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2123      	movs	r1, #35	@ 0x23
 8000880:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_GPIO_Init+0x84>)
 8000882:	f001 fb97 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	2310      	movs	r3, #16
 8000888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP  ;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <MX_GPIO_Init+0x88>)
 8000898:	f001 fa04 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800089c:	2323      	movs	r3, #35	@ 0x23
 800089e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <MX_GPIO_Init+0x84>)
 80008b2:	f001 f9f7 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80008b6:	2303      	movs	r3, #3
 80008b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_GPIO_Init+0x8c>)
 80008c8:	f001 f9ec 	bl	8001ca4 <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	48000400 	.word	0x48000400
 80008d8:	48000800 	.word	0x48000800
 80008dc:	48000c00 	.word	0x48000c00

080008e0 <Error_Handler>:


void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <LL_AHB2_GRP1_EnableClock>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800092a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800092c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4313      	orrs	r3, r2
 8000934:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800093a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800095c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800095e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4313      	orrs	r3, r2
 8000966:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800096c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000974:	68fb      	ldr	r3, [r7, #12]
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <HAL_ADC_MspInit+0x50>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d112      	bne.n	80009d8 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009b2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009b6:	f7ff ff99 	bl	80008ec <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2004      	movs	r0, #4
 80009bc:	f7ff ff96 	bl	80008ec <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009c0:	2303      	movs	r3, #3
 80009c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c4:	2303      	movs	r3, #3
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <HAL_ADC_MspInit+0x54>)
 80009d4:	f001 f966 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	50040000 	.word	0x50040000
 80009e4:	48000800 	.word	0x48000800

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09c      	sub	sp, #112	@ 0x70
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2250      	movs	r2, #80	@ 0x50
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 ffb8 	bl	800497e <memset>
  if(huart->Instance==USART1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <HAL_UART_MspInit+0x84>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d124      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 ff29 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff ff56 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a38:	f7ff ff8a 	bl	8000950 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f7ff ff55 	bl	80008ec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a42:	23c0      	movs	r3, #192	@ 0xc0
 8000a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a52:	2307      	movs	r3, #7
 8000a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a5e:	f001 f921 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3770      	adds	r7, #112	@ 0x70
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	48000400 	.word	0x48000400

08000a74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad0 <HAL_PCD_MspInit+0x5c>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d118      	bne.n	8000ac8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff ff28 	bl	80008ec <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000aa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f001 f8f2 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ac0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000ac4:	f7ff ff2b 	bl	800091e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40006800 	.word	0x40006800

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f8e9 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <SystemInit+0x98>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <SystemInit+0x98>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b60:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <SystemInit+0x9c>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b7e:	f023 0305 	bic.w	r3, r3, #5
 8000b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b92:	f023 0301 	bic.w	r3, r3, #1
 8000b96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <SystemInit+0xa0>)
 8000ba0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <SystemInit+0xa0>)
 8000ba8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	faf6fefb 	.word	0xfaf6fefb
 8000bd4:	22041000 	.word	0x22041000

08000bd8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bd8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bda:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bdc:	3304      	adds	r3, #4

08000bde <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bde:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000be2:	d3f9      	bcc.n	8000bd8 <CopyDataInit>
  bx lr
 8000be4:	4770      	bx	lr

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000be6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000be8:	3004      	adds	r0, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000bea:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>
  bx lr
 8000bee:	4770      	bx	lr

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf4:	f7ff ff9e 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <LoopForever+0x6>)
 8000bfa:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <LoopForever+0xa>)
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <LoopForever+0xe>)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f7ff ffed 	bl	8000bde <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <LoopForever+0x12>)
 8000c06:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <LoopForever+0x16>)
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <LoopForever+0x1a>)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f7ff ffe7 	bl	8000bde <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <LoopForever+0x1e>)
 8000c12:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <LoopForever+0x22>)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f7ff ffe8 	bl	8000bea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1a:	f003 feb9 	bl	8004990 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c1e:	f7ff fc55 	bl	80004cc <main>

08000c22 <LoopForever>:

LoopForever:
  b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	08004af4 	.word	0x08004af4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c34:	20030000 	.word	0x20030000
 8000c38:	20030000 	.word	0x20030000
 8000c3c:	08004b04 	.word	0x08004b04
  INIT_BSS _sbss, _ebss
 8000c40:	20000018 	.word	0x20000018
 8000c44:	2000040c 	.word	0x2000040c

08000c48 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_Init+0x3c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <HAL_Init+0x3c>)
 8000c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 ffec 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 f80f 	bl	8000c8c <HAL_InitTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	e001      	b.n	8000c7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7a:	f7ff fe82 	bl	8000982 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58004000 	.word	0x58004000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d024      	beq.n	8000cea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	f002 fb4c 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 ffe6 	bl	8001c8a <HAL_SYSTICK_Config>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d809      	bhi.n	8000cde <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd2:	f000 ffc0 	bl	8001c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd6:	4a09      	ldr	r2, [pc, #36]	@ (8000cfc <HAL_InitTick+0x70>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e004      	b.n	8000cee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e001      	b.n	8000cee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000014 	.word	0x20000014
 8000cfc:	20000010 	.word	0x20000010

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000014 	.word	0x20000014
 8000d24:	20000408 	.word	0x20000408

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000408 	.word	0x20000408

08000d40 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTickPrio+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000010 	.word	0x20000010

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffe2 	bl	8000d28 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffd2 	bl	8000d28 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000014 	.word	0x20000014

08000da0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	609a      	str	r2, [r3, #8]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3360      	adds	r3, #96	@ 0x60
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <LL_ADC_SetOffset+0x44>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	4313      	orrs	r3, r2
 8000e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	03fff000 	.word	0x03fff000

08000e50 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3360      	adds	r3, #96	@ 0x60
 8000e5e:	461a      	mov	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3360      	adds	r3, #96	@ 0x60
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b087      	sub	sp, #28
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3330      	adds	r3, #48	@ 0x30
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	4413      	add	r3, r2
 8000ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	211f      	movs	r1, #31
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0e9b      	lsrs	r3, r3, #26
 8000eea:	f003 011f 	and.w	r1, r3, #31
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	f003 031f 	and.w	r3, r3, #31
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b087      	sub	sp, #28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3314      	adds	r3, #20
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	0e5b      	lsrs	r3, r3, #25
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	0d1b      	lsrs	r3, r3, #20
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	2107      	movs	r1, #7
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	0d1b      	lsrs	r3, r3, #20
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0318 	and.w	r3, r3, #24
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f84:	40d9      	lsrs	r1, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	400b      	ands	r3, r1
 8000f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	0007ffff 	.word	0x0007ffff

08000fa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6093      	str	r3, [r2, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001004:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001008:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001030:	d101      	bne.n	8001036 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <LL_ADC_IsEnabled+0x18>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <LL_ADC_IsEnabled+0x1a>
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b04      	cmp	r3, #4
 800107c:	d101      	bne.n	8001082 <LL_ADC_REG_IsConversionOngoing+0x18>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d101      	bne.n	80010a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e12e      	b.n	8001334 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d109      	bne.n	80010f8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fc53 	bl	8000990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff65 	bl	8000fcc <LL_ADC_IsDeepPowerDownEnabled>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff4b 	bl	8000fa8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff80 	bl	800101c <LL_ADC_IsInternalRegulatorEnabled>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d115      	bne.n	800114e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff64 	bl	8000ff4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800112c:	4b83      	ldr	r3, [pc, #524]	@ (800133c <HAL_ADC_Init+0x284>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	099b      	lsrs	r3, r3, #6
 8001132:	4a83      	ldr	r2, [pc, #524]	@ (8001340 <HAL_ADC_Init+0x288>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	099b      	lsrs	r3, r3, #6
 800113a:	3301      	adds	r3, #1
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001140:	e002      	b.n	8001148 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3b01      	subs	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f9      	bne.n	8001142 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff62 	bl	800101c <LL_ADC_IsInternalRegulatorEnabled>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001162:	f043 0210 	orr.w	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff73 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001184:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 80c7 	bne.w	8001322 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80c3 	bne.w	8001322 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011a4:	f043 0202 	orr.w	r2, r3, #2
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff47 	bl	8001044 <LL_ADC_IsEnabled>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10b      	bne.n	80011d4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011bc:	4861      	ldr	r0, [pc, #388]	@ (8001344 <HAL_ADC_Init+0x28c>)
 80011be:	f7ff ff41 	bl	8001044 <LL_ADC_IsEnabled>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4619      	mov	r1, r3
 80011ce:	485e      	ldr	r0, [pc, #376]	@ (8001348 <HAL_ADC_Init+0x290>)
 80011d0:	f7ff fde6 	bl	8000da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7e5b      	ldrb	r3, [r3, #25]
 80011d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80011f4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	3b01      	subs	r3, #1
 800120c:	045b      	lsls	r3, r3, #17
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001220:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001228:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	4b45      	ldr	r3, [pc, #276]	@ (800134c <HAL_ADC_Init+0x294>)
 8001238:	4013      	ands	r3, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	430b      	orrs	r3, r1
 8001242:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff0e 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 800124e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff1b 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 800125a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d13d      	bne.n	80012de <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d13a      	bne.n	80012de <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800126c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001274:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001284:	f023 0302 	bic.w	r3, r3, #2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	69b9      	ldr	r1, [r7, #24]
 800128e:	430b      	orrs	r3, r1
 8001290:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001298:	2b01      	cmp	r3, #1
 800129a:	d118      	bne.n	80012ce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012b2:	4311      	orrs	r1, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80012b8:	4311      	orrs	r1, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012be:	430a      	orrs	r2, r1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	e007      	b.n	80012de <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10c      	bne.n	8001300 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f023 010f 	bic.w	r1, r3, #15
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80012fe:	e007      	b.n	8001310 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 020f 	bic.w	r2, r2, #15
 800130e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001314:	f023 0303 	bic.w	r3, r3, #3
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001320:	e007      	b.n	8001332 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001326:	f043 0210 	orr.w	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001332:	7ffb      	ldrb	r3, [r7, #31]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000000c 	.word	0x2000000c
 8001340:	053e2d63 	.word	0x053e2d63
 8001344:	50040000 	.word	0x50040000
 8001348:	50040300 	.word	0x50040300
 800134c:	fff0c007 	.word	0xfff0c007

08001350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b6      	sub	sp, #216	@ 0xd8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x22>
 800136e:	2302      	movs	r3, #2
 8001370:	e39f      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x762>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe73 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8384 	bne.w	8001a94 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6859      	ldr	r1, [r3, #4]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	f7ff fd8a 	bl	8000eb2 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe61 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 80013a8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe6d 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 80013b6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 81a6 	bne.w	8001710 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 81a1 	bne.w	8001710 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	461a      	mov	r2, r3
 80013dc:	f7ff fd95 	bl	8000f0a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d00a      	beq.n	8001418 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001412:	f7ff fcf9 	bl	8000e08 <LL_ADC_SetOffset>
 8001416:	e17b      	b.n	8001710 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fd16 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10a      	bne.n	8001444 <HAL_ADC_ConfigChannel+0xf4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd0b 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	0e9b      	lsrs	r3, r3, #26
 800143e:	f003 021f 	and.w	r2, r3, #31
 8001442:	e01e      	b.n	8001482 <HAL_ADC_ConfigChannel+0x132>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd00 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800146a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001472:	2320      	movs	r3, #32
 8001474:	e004      	b.n	8001480 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_ConfigChannel+0x14a>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	e018      	b.n	80014cc <HAL_ADC_ConfigChannel+0x17c>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80014ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80014b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80014be:	2320      	movs	r3, #32
 80014c0:	e004      	b.n	80014cc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80014c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d106      	bne.n	80014de <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fccf 	bl	8000e7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fcb3 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10a      	bne.n	800150a <HAL_ADC_ConfigChannel+0x1ba>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fca8 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	0e9b      	lsrs	r3, r3, #26
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	e01e      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1f8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc9d 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001528:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800152c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001538:	2320      	movs	r3, #32
 800153a:	e004      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800153c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x210>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	e018      	b.n	8001592 <HAL_ADC_ConfigChannel+0x242>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001574:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001578:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800157c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001584:	2320      	movs	r3, #32
 8001586:	e004      	b.n	8001592 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	429a      	cmp	r2, r3
 8001594:	d106      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc6c 	bl	8000e7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2102      	movs	r1, #2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fc50 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10a      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x280>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2102      	movs	r1, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc45 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	f003 021f 	and.w	r2, r3, #31
 80015ce:	e01e      	b.n	800160e <HAL_ADC_ConfigChannel+0x2be>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2102      	movs	r1, #2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fc3a 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80015ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80015f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80015fe:	2320      	movs	r3, #32
 8001600:	e004      	b.n	800160c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001602:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x2d6>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0e9b      	lsrs	r3, r3, #26
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	e016      	b.n	8001654 <HAL_ADC_ConfigChannel+0x304>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800163a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800163e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001646:	2320      	movs	r3, #32
 8001648:	e004      	b.n	8001654 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800164a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	429a      	cmp	r2, r3
 8001656:	d106      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	2102      	movs	r1, #2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fc0b 	bl	8000e7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2103      	movs	r1, #3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fbef 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10a      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x342>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2103      	movs	r1, #3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fbe4 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	0e9b      	lsrs	r3, r3, #26
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	e017      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x372>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2103      	movs	r1, #3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fbd9 	bl	8000e50 <LL_ADC_GetOffsetChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80016ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80016b4:	2320      	movs	r3, #32
 80016b6:	e003      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80016b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_ADC_ConfigChannel+0x38a>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0e9b      	lsrs	r3, r3, #26
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	e011      	b.n	80016fe <HAL_ADC_ConfigChannel+0x3ae>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80016e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80016ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80016f2:	2320      	movs	r3, #32
 80016f4:	e003      	b.n	80016fe <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80016f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	429a      	cmp	r2, r3
 8001700:	d106      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	2103      	movs	r1, #3
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fbb6 	bl	8000e7c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fc95 	bl	8001044 <LL_ADC_IsEnabled>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 81c2 	bne.w	8001aa6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	461a      	mov	r2, r3
 8001730:	f7ff fc16 	bl	8000f60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a8e      	ldr	r2, [pc, #568]	@ (8001974 <HAL_ADC_ConfigChannel+0x624>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f040 8130 	bne.w	80019a0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10b      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x418>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0e9b      	lsrs	r3, r3, #26
 8001756:	3301      	adds	r3, #1
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	2b09      	cmp	r3, #9
 800175e:	bf94      	ite	ls
 8001760:	2301      	movls	r3, #1
 8001762:	2300      	movhi	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	e019      	b.n	800179c <HAL_ADC_ConfigChannel+0x44c>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001778:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800177a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001780:	2320      	movs	r3, #32
 8001782:	e003      	b.n	800178c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	2b09      	cmp	r3, #9
 8001794:	bf94      	ite	ls
 8001796:	2301      	movls	r3, #1
 8001798:	2300      	movhi	r3, #0
 800179a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800179c:	2b00      	cmp	r3, #0
 800179e:	d079      	beq.n	8001894 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x46c>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	3301      	adds	r3, #1
 80017b4:	069b      	lsls	r3, r3, #26
 80017b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017ba:	e015      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x498>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80017ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80017ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e003      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80017d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	069b      	lsls	r3, r3, #26
 80017e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x4b8>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	3301      	adds	r3, #1
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	e017      	b.n	8001838 <HAL_ADC_ConfigChannel+0x4e8>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001818:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800181a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001820:	2320      	movs	r3, #32
 8001822:	e003      	b.n	800182c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001826:	fab3 f383 	clz	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	ea42 0103 	orr.w	r1, r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_ADC_ConfigChannel+0x50e>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	3301      	adds	r3, #1
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	051b      	lsls	r3, r3, #20
 800185c:	e018      	b.n	8001890 <HAL_ADC_ConfigChannel+0x540>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001876:	2320      	movs	r3, #32
 8001878:	e003      	b.n	8001882 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800187a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001890:	430b      	orrs	r3, r1
 8001892:	e080      	b.n	8001996 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x560>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0e9b      	lsrs	r3, r3, #26
 80018a6:	3301      	adds	r3, #1
 80018a8:	069b      	lsls	r3, r3, #26
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018ae:	e015      	b.n	80018dc <HAL_ADC_ConfigChannel+0x58c>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80018be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80018c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	e003      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80018cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	069b      	lsls	r3, r3, #26
 80018d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x5ac>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e9b      	lsrs	r3, r3, #26
 80018ee:	3301      	adds	r3, #1
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	e017      	b.n	800192c <HAL_ADC_ConfigChannel+0x5dc>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	61fb      	str	r3, [r7, #28]
  return result;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e003      	b.n	8001920 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	ea42 0103 	orr.w	r1, r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10d      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x608>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	3301      	adds	r3, #1
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	3b1e      	subs	r3, #30
 8001950:	051b      	lsls	r3, r3, #20
 8001952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001956:	e01d      	b.n	8001994 <HAL_ADC_ConfigChannel+0x644>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	613b      	str	r3, [r7, #16]
  return result;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001970:	2320      	movs	r3, #32
 8001972:	e005      	b.n	8001980 <HAL_ADC_ConfigChannel+0x630>
 8001974:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3301      	adds	r3, #1
 8001982:	f003 021f 	and.w	r2, r3, #31
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	3b1e      	subs	r3, #30
 800198e:	051b      	lsls	r3, r3, #20
 8001990:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001994:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff fab5 	bl	8000f0a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b45      	ldr	r3, [pc, #276]	@ (8001abc <HAL_ADC_ConfigChannel+0x76c>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d07c      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ac:	4844      	ldr	r0, [pc, #272]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x770>)
 80019ae:	f7ff fa1d 	bl	8000dec <LL_ADC_GetCommonPathInternalCh>
 80019b2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b6:	4843      	ldr	r0, [pc, #268]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x774>)
 80019b8:	f7ff fb44 	bl	8001044 <LL_ADC_IsEnabled>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d15e      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a40      	ldr	r2, [pc, #256]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x778>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d127      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x6cc>
 80019cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d121      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a39      	ldr	r2, [pc, #228]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x774>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d161      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80019e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019ea:	4619      	mov	r1, r3
 80019ec:	4834      	ldr	r0, [pc, #208]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x770>)
 80019ee:	f7ff f9ea 	bl	8000dc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f2:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <HAL_ADC_ConfigChannel+0x77c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	4a35      	ldr	r2, [pc, #212]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x780>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a1a:	e044      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x784>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d113      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x6fe>
 8001a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10d      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x774>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d134      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a44:	4619      	mov	r1, r3
 8001a46:	481e      	ldr	r0, [pc, #120]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x770>)
 8001a48:	f7ff f9bd 	bl	8000dc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a4c:	e02b      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x788>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d126      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
 8001a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d120      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x774>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a76:	4619      	mov	r1, r3
 8001a78:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x770>)
 8001a7a:	f7ff f9a4 	bl	8000dc6 <LL_ADC_SetCommonPathInternalCh>
 8001a7e:	e012      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001a92:	e008      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001aae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	37d8      	adds	r7, #216	@ 0xd8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	80080000 	.word	0x80080000
 8001ac0:	50040300 	.word	0x50040300
 8001ac4:	50040000 	.word	0x50040000
 8001ac8:	c7520000 	.word	0xc7520000
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	053e2d63 	.word	0x053e2d63
 8001ad4:	cb840000 	.word	0xcb840000
 8001ad8:	80000001 	.word	0x80000001

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff47 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff5e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff90 	bl	8001b94 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5f 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffb2 	bl	8001bfc <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e14c      	b.n	8001f4e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 813e 	beq.w	8001f48 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d005      	beq.n	8001ce4 <HAL_GPIO_Init+0x40>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0201 	and.w	r2, r3, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d017      	beq.n	8001d82 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	6939      	ldr	r1, [r7, #16]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8098 	beq.w	8001f48 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e18:	4a54      	ldr	r2, [pc, #336]	@ (8001f6c <HAL_GPIO_Init+0x2c8>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x1d4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4a      	ldr	r2, [pc, #296]	@ (8001f70 <HAL_GPIO_Init+0x2cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1d0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a49      	ldr	r2, [pc, #292]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1cc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a48      	ldr	r2, [pc, #288]	@ (8001f78 <HAL_GPIO_Init+0x2d4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1c8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a47      	ldr	r2, [pc, #284]	@ (8001f7c <HAL_GPIO_Init+0x2d8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1c4>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e008      	b.n	8001e7a <HAL_GPIO_Init+0x1d6>
 8001e68:	2307      	movs	r3, #7
 8001e6a:	e006      	b.n	8001e7a <HAL_GPIO_Init+0x1d6>
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e004      	b.n	8001e7a <HAL_GPIO_Init+0x1d6>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x1d6>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_GPIO_Init+0x1d6>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	f002 0203 	and.w	r2, r2, #3
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	4093      	lsls	r3, r2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e8a:	4938      	ldr	r1, [pc, #224]	@ (8001f6c <HAL_GPIO_Init+0x2c8>)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e98:	4b39      	ldr	r3, [pc, #228]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ebc:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee6:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eec:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f12:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f40:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f aeab 	bne.w	8001cb4 <HAL_GPIO_Init+0x10>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	58000800 	.word	0x58000800

08001f84 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0c0      	b.n	8002178 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fd32 	bl	8000a74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fc75 	bl	800490c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e03e      	b.n	80020a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	3311      	adds	r3, #17
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3310      	adds	r3, #16
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	3313      	adds	r3, #19
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3320      	adds	r3, #32
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3324      	adds	r3, #36	@ 0x24
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	3301      	adds	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	791b      	ldrb	r3, [r3, #4]
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3bb      	bcc.n	8002028 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e044      	b.n	8002140 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	791b      	ldrb	r3, [r3, #4]
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3b5      	bcc.n	80020b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002156:	f002 fbf4 	bl	8004942 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7a9b      	ldrb	r3, [r3, #10]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f805 	bl	8002180 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	58000400 	.word	0x58000400

080021f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80021f8:	4b04      	ldr	r3, [pc, #16]	@ (800220c <HAL_PWREx_GetVoltageRange+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	58000400 	.word	0x58000400

08002210 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002222:	d101      	bne.n	8002228 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_RCC_HSE_Enable>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_HSE_Disable>:
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_RCC_HSE_IsReady>:
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002282:	d101      	bne.n	8002288 <LL_RCC_HSE_IsReady+0x18>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_RCC_HSE_IsReady+0x1a>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_RCC_HSI_Enable>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_HSI_Disable>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022c4:	6013      	str	r3, [r2, #0]
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_RCC_HSI_IsReady>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e2:	d101      	bne.n	80022e8 <LL_RCC_HSI_IsReady+0x18>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <LL_RCC_HSI_IsReady+0x1a>
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_RCC_HSI48_Enable>:
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800232a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_RCC_HSI48_Disable>:
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800234c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_RCC_HSI48_IsReady>:
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d101      	bne.n	800237a <LL_RCC_HSI48_IsReady+0x18>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_RCC_HSI48_IsReady+0x1a>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_RCC_LSE_Enable>:
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_LSE_Disable>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_LSE_EnableBypass>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_RCC_LSE_DisableBypass>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d101      	bne.n	8002426 <LL_RCC_LSE_IsReady+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_RCC_LSE_IsReady+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002460:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d101      	bne.n	800248e <LL_RCC_LSI1_IsReady+0x18>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_RCC_LSI1_IsReady+0x1a>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d101      	bne.n	80024f6 <LL_RCC_LSI2_IsReady+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_RCC_LSI2_IsReady+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002512:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6013      	str	r3, [r2, #0]
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d101      	bne.n	8002582 <LL_RCC_MSI_IsReady+0x16>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <LL_RCC_MSI_IsReady+0x18>
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2bb0      	cmp	r3, #176	@ 0xb0
 80025cc:	d901      	bls.n	80025d2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80025ce:	23b0      	movs	r3, #176	@ 0xb0
 80025d0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 0203 	bic.w	r2, r3, #3
 800261c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002682:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002686:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026ae:	f023 020f 	bic.w	r2, r3, #15
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027ce:	d101      	bne.n	80027d4 <LL_RCC_PLL_IsReady+0x18>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <LL_RCC_PLL_IsReady+0x1a>
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0303 	and.w	r3, r3, #3
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002854:	d101      	bne.n	800285a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800287a:	d101      	bne.n	8002880 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002894:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a0:	d101      	bne.n	80028a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028c4:	d101      	bne.n	80028ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028e8:	d101      	bne.n	80028ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b08d      	sub	sp, #52	@ 0x34
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e363      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 808d 	beq.w	8002a36 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291c:	f7ff fe89 	bl	8002632 <LL_RCC_GetSysClkSource>
 8002920:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002922:	f7ff ff82 	bl	800282a <LL_RCC_PLL_GetMainSource>
 8002926:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x3e>
 800292e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002930:	2b0c      	cmp	r3, #12
 8002932:	d147      	bne.n	80029c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	2b01      	cmp	r3, #1
 8002938:	d144      	bne.n	80029c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e347      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800294a:	f7ff fe34 	bl	80025b6 <LL_RCC_MSI_GetRange>
 800294e:	4603      	mov	r3, r0
 8002950:	429c      	cmp	r4, r3
 8002952:	d914      	bls.n	800297e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fd2f 	bl	80033bc <RCC_SetFlashLatencyFromMSIRange>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e336      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fe0e 	bl	800258e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fe32 	bl	80025e0 <LL_RCC_MSI_SetCalibTrimming>
 800297c:	e013      	b.n	80029a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe03 	bl	800258e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe27 	bl	80025e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fd10 	bl	80033bc <RCC_SetFlashLatencyFromMSIRange>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e317      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029a6:	f000 fcc9 	bl	800333c <HAL_RCC_GetHCLKFreq>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4aa4      	ldr	r2, [pc, #656]	@ (8002c40 <HAL_RCC_OscConfig+0x344>)
 80029ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029b0:	4ba4      	ldr	r3, [pc, #656]	@ (8002c44 <HAL_RCC_OscConfig+0x348>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe f969 	bl	8000c8c <HAL_InitTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d039      	beq.n	8002a34 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e308      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01e      	beq.n	8002a0a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029cc:	f7ff fdb0 	bl	8002530 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d0:	f7fe f9aa 	bl	8000d28 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d8:	f7fe f9a6 	bl	8000d28 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e2f5      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80029ea:	f7ff fdbf 	bl	800256c <LL_RCC_MSI_IsReady>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f1      	beq.n	80029d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fdc8 	bl	800258e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fdec 	bl	80025e0 <LL_RCC_MSI_SetCalibTrimming>
 8002a08:	e015      	b.n	8002a36 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a0a:	f7ff fda0 	bl	800254e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe f98b 	bl	8000d28 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7fe f987 	bl	8000d28 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e2d6      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a28:	f7ff fda0 	bl	800256c <LL_RCC_MSI_IsReady>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f1      	bne.n	8002a16 <HAL_RCC_OscConfig+0x11a>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a34:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d047      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	f7ff fdf6 	bl	8002632 <LL_RCC_GetSysClkSource>
 8002a46:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a48:	f7ff feef 	bl	800282a <LL_RCC_PLL_GetMainSource>
 8002a4c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x164>
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d134      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e2b4      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a74:	d102      	bne.n	8002a7c <HAL_RCC_OscConfig+0x180>
 8002a76:	f7ff fbdd 	bl	8002234 <LL_RCC_HSE_Enable>
 8002a7a:	e001      	b.n	8002a80 <HAL_RCC_OscConfig+0x184>
 8002a7c:	f7ff fbe9 	bl	8002252 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe f94e 	bl	8000d28 <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe f94a 	bl	8000d28 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e299      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002aa2:	f7ff fbe5 	bl	8002270 <LL_RCC_HSE_IsReady>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f1      	beq.n	8002a90 <HAL_RCC_OscConfig+0x194>
 8002aac:	e011      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe f93b 	bl	8000d28 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab6:	f7fe f937 	bl	8000d28 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	@ 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e286      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ac8:	f7ff fbd2 	bl	8002270 <LL_RCC_HSE_IsReady>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f1      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	f7ff fda8 	bl	8002632 <LL_RCC_GetSysClkSource>
 8002ae2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae4:	f7ff fea1 	bl	800282a <LL_RCC_PLL_GetMainSource>
 8002ae8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_OscConfig+0x200>
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d10e      	bne.n	8002b14 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d10b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e266      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fbf1 	bl	80022f4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b12:	e031      	b.n	8002b78 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d019      	beq.n	8002b50 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	f7ff fbba 	bl	8002294 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f902 	bl	8000d28 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe f8fe 	bl	8000d28 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e24d      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b3a:	f7ff fbc9 	bl	80022d0 <LL_RCC_HSI_IsReady>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f1      	beq.n	8002b28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fbd3 	bl	80022f4 <LL_RCC_HSI_SetCalibTrimming>
 8002b4e:	e013      	b.n	8002b78 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b50:	f7ff fbaf 	bl	80022b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe f8e8 	bl	8000d28 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe f8e4 	bl	8000d28 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e233      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b6e:	f7ff fbaf 	bl	80022d0 <LL_RCC_HSI_IsReady>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f1      	bne.n	8002b5c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a3 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d076      	beq.n	8002c88 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d046      	beq.n	8002c34 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002ba6:	f7ff fc66 	bl	8002476 <LL_RCC_LSI1_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d113      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002bb0:	f7ff fc3f 	bl	8002432 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb4:	f7fe f8b8 	bl	8000d28 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bbc:	f7fe f8b4 	bl	8000d28 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e203      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002bce:	f7ff fc52 	bl	8002476 <LL_RCC_LSI1_IsReady>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f1      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002bd8:	f7ff fc5f 	bl	800249a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f8a4 	bl	8000d28 <HAL_GetTick>
 8002be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002be4:	f7fe f8a0 	bl	8000d28 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1ef      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002bf6:	f7ff fc72 	bl	80024de <LL_RCC_LSI2_IsReady>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f1      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fc7c 	bl	8002502 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002c0a:	f7ff fc23 	bl	8002454 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f88b 	bl	8000d28 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c16:	f7fe f887 	bl	8000d28 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1d6      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c28:	f7ff fc25 	bl	8002476 <LL_RCC_LSI1_IsReady>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f1      	bne.n	8002c16 <HAL_RCC_OscConfig+0x31a>
 8002c32:	e051      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002c34:	f7ff fbfd 	bl	8002432 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f876 	bl	8000d28 <HAL_GetTick>
 8002c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c3e:	e00c      	b.n	8002c5a <HAL_RCC_OscConfig+0x35e>
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c48:	f7fe f86e 	bl	8000d28 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1bd      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c5a:	f7ff fc0c 	bl	8002476 <LL_RCC_LSI1_IsReady>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f1      	beq.n	8002c48 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002c64:	f7ff fc2a 	bl	80024bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c6a:	f7fe f85d 	bl	8000d28 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1ac      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c7c:	f7ff fc2f 	bl	80024de <LL_RCC_LSI2_IsReady>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f1      	bne.n	8002c6a <HAL_RCC_OscConfig+0x36e>
 8002c86:	e027      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002c88:	f7ff fc18 	bl	80024bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f84c 	bl	8000d28 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c94:	f7fe f848 	bl	8000d28 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e197      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002ca6:	f7ff fc1a 	bl	80024de <LL_RCC_LSI2_IsReady>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f1      	bne.n	8002c94 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002cb0:	f7ff fbd0 	bl	8002454 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe f838 	bl	8000d28 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cbc:	f7fe f834 	bl	8000d28 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e183      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002cce:	f7ff fbd2 	bl	8002476 <LL_RCC_LSI1_IsReady>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f1      	bne.n	8002cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05b      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce4:	4ba7      	ldr	r3, [pc, #668]	@ (8002f84 <HAL_RCC_OscConfig+0x688>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d114      	bne.n	8002d1a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002cf0:	f7ff fa70 	bl	80021d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe f818 	bl	8000d28 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe f814 	bl	8000d28 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e163      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0e:	4b9d      	ldr	r3, [pc, #628]	@ (8002f84 <HAL_RCC_OscConfig+0x688>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0x42c>
 8002d22:	f7ff fb30 	bl	8002386 <LL_RCC_LSE_Enable>
 8002d26:	e00c      	b.n	8002d42 <HAL_RCC_OscConfig+0x446>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d104      	bne.n	8002d3a <HAL_RCC_OscConfig+0x43e>
 8002d30:	f7ff fb4b 	bl	80023ca <LL_RCC_LSE_EnableBypass>
 8002d34:	f7ff fb27 	bl	8002386 <LL_RCC_LSE_Enable>
 8002d38:	e003      	b.n	8002d42 <HAL_RCC_OscConfig+0x446>
 8002d3a:	f7ff fb35 	bl	80023a8 <LL_RCC_LSE_Disable>
 8002d3e:	f7ff fb55 	bl	80023ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d014      	beq.n	8002d74 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fd ffed 	bl	8000d28 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fd ffe9 	bl	8000d28 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e136      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d68:	f7ff fb51 	bl	800240e <LL_RCC_LSE_IsReady>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ef      	beq.n	8002d52 <HAL_RCC_OscConfig+0x456>
 8002d72:	e013      	b.n	8002d9c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fd ffd8 	bl	8000d28 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fd ffd4 	bl	8000d28 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e121      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d92:	f7ff fb3c 	bl	800240e <LL_RCC_LSE_IsReady>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ef      	bne.n	8002d7c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d014      	beq.n	8002dda <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002db0:	f7ff fab5 	bl	800231e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fd ffb8 	bl	8000d28 <HAL_GetTick>
 8002db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dbc:	f7fd ffb4 	bl	8000d28 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e103      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002dce:	f7ff fac8 	bl	8002362 <LL_RCC_HSI48_IsReady>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f1      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4c0>
 8002dd8:	e013      	b.n	8002e02 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dda:	f7ff fab1 	bl	8002340 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fd ffa3 	bl	8000d28 <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de6:	f7fd ff9f 	bl	8000d28 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0ee      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002df8:	f7ff fab3 	bl	8002362 <LL_RCC_HSI48_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f1      	bne.n	8002de6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80e4 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0c:	f7ff fc11 	bl	8002632 <LL_RCC_GetSysClkSource>
 8002e10:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	f040 80b4 	bne.w	8002f8c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0203 	and.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d123      	bne.n	8002e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d11c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d114      	bne.n	8002e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d05d      	beq.n	8002f36 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d058      	beq.n	8002f32 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0a1      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e92:	f7ff fc84 	bl	800279e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e96:	f7fd ff47 	bl	8000d28 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fd ff43 	bl	8000d28 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e092      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ef      	bne.n	8002e9e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b30      	ldr	r3, [pc, #192]	@ (8002f88 <HAL_RCC_OscConfig+0x68c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ed0:	4311      	orrs	r1, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ed6:	0212      	lsls	r2, r2, #8
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002eea:	430a      	orrs	r2, r1
 8002eec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ef4:	f7ff fc44 	bl	8002780 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f08:	f7fd ff0e 	bl	8000d28 <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fd ff0a 	bl	8000d28 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e059      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f30:	e050      	b.n	8002fd4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e04f      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d147      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f44:	f7ff fc1c 	bl	8002780 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f58:	f7fd fee6 	bl	8000d28 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fd fee2 	bl	8000d28 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e031      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCC_OscConfig+0x664>
 8002f80:	e028      	b.n	8002fd4 <HAL_RCC_OscConfig+0x6d8>
 8002f82:	bf00      	nop
 8002f84:	58000400 	.word	0x58000400
 8002f88:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d01e      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	f7ff fc04 	bl	800279e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fd fec7 	bl	8000d28 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fd fec3 	bl	8000d28 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e012      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ef      	bne.n	8002f9e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_RCC_OscConfig+0x6e4>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60cb      	str	r3, [r1, #12]
 8002fce:	e001      	b.n	8002fd4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3734      	adds	r7, #52	@ 0x34
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd90      	pop	{r4, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	eefefffc 	.word	0xeefefffc

08002fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e12d      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b98      	ldr	r3, [pc, #608]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d91b      	bls.n	800303e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b95      	ldr	r3, [pc, #596]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4993      	ldr	r1, [pc, #588]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003016:	f7fd fe87 	bl	8000d28 <HAL_GetTick>
 800301a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301c:	e008      	b.n	8003030 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800301e:	f7fd fe83 	bl	8000d28 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e111      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003030:	4b8a      	ldr	r3, [pc, #552]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d1ef      	bne.n	800301e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fafb 	bl	800264a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003054:	f7fd fe68 	bl	8000d28 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800305c:	f7fd fe64 	bl	8000d28 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0f2      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800306e:	f7ff fbe8 	bl	8002842 <LL_RCC_IsActiveFlag_HPRE>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f1      	beq.n	800305c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff faf2 	bl	8002672 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800308e:	f7fd fe4b 	bl	8000d28 <HAL_GetTick>
 8003092:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003096:	f7fd fe47 	bl	8000d28 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0d5      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80030a8:	f7ff fbdd 	bl	8002866 <LL_RCC_IsActiveFlag_C2HPRE>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f1      	beq.n	8003096 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff faeb 	bl	800269e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030c8:	f7fd fe2e 	bl	8000d28 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030d0:	f7fd fe2a 	bl	8000d28 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0b8      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030e2:	f7ff fbd3 	bl	800288c <LL_RCC_IsActiveFlag_SHDHPRE>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f1      	beq.n	80030d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d016      	beq.n	8003126 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fae5 	bl	80026cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003102:	f7fd fe11 	bl	8000d28 <HAL_GetTick>
 8003106:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800310a:	f7fd fe0d 	bl	8000d28 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e09b      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800311c:	f7ff fbc9 	bl	80028b2 <LL_RCC_IsActiveFlag_PPRE1>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f1      	beq.n	800310a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fadb 	bl	80026f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800313e:	f7fd fdf3 	bl	8000d28 <HAL_GetTick>
 8003142:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003146:	f7fd fdef 	bl	8000d28 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e07d      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003158:	f7ff fbbd 	bl	80028d6 <LL_RCC_IsActiveFlag_PPRE2>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f1      	beq.n	8003146 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d043      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d106      	bne.n	8003184 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003176:	f7ff f87b 	bl	8002270 <LL_RCC_HSE_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d11e      	bne.n	80031be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e067      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d106      	bne.n	800319a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800318c:	f7ff fb16 	bl	80027bc <LL_RCC_PLL_IsReady>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e05c      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80031a2:	f7ff f9e3 	bl	800256c <LL_RCC_MSI_IsReady>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e051      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80031b0:	f7ff f88e 	bl	80022d0 <LL_RCC_HSI_IsReady>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e04a      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fa21 	bl	800260a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fd fdae 	bl	8000d28 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fd fdaa 	bl	8000d28 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e036      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	f7ff fa24 	bl	8002632 <LL_RCC_GetSysClkSource>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d1ec      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d21b      	bcs.n	800323c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 0207 	bic.w	r2, r3, #7
 800320c:	4913      	ldr	r1, [pc, #76]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003214:	f7fd fd88 	bl	8000d28 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	e008      	b.n	800322e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800321c:	f7fd fd84 	bl	8000d28 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e012      	b.n	8003254 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_ClockConfig+0x278>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d1ef      	bne.n	800321c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800323c:	f000 f87e 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003240:	4603      	mov	r3, r0
 8003242:	4a07      	ldr	r2, [pc, #28]	@ (8003260 <HAL_RCC_ClockConfig+0x27c>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003246:	f7fd fd7b 	bl	8000d40 <HAL_GetTickPrio>
 800324a:	4603      	mov	r3, r0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fd1d 	bl	8000c8c <HAL_InitTick>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	58004000 	.word	0x58004000
 8003260:	2000000c 	.word	0x2000000c

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326a:	f7ff f9e2 	bl	8002632 <LL_RCC_GetSysClkSource>
 800326e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003276:	f7ff f99e 	bl	80025b6 <LL_RCC_MSI_GetRange>
 800327a:	4603      	mov	r3, r0
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e04b      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d102      	bne.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003292:	4b28      	ldr	r3, [pc, #160]	@ (8003334 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e045      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d10a      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800329e:	f7fe ffb7 	bl	8002210 <LL_RCC_HSE_IsEnabledDiv2>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80032a8:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e03a      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80032ae:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <HAL_RCC_GetSysClockFreq+0xd4>)
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e037      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80032b4:	f7ff fab9 	bl	800282a <LL_RCC_PLL_GetMainSource>
 80032b8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d003      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x64>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d003      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x6a>
 80032c6:	e00d      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032ca:	60bb      	str	r3, [r7, #8]
        break;
 80032cc:	e015      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80032ce:	f7fe ff9f 	bl	8002210 <LL_RCC_HSE_IsEnabledDiv2>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d102      	bne.n	80032de <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80032d8:	4b16      	ldr	r3, [pc, #88]	@ (8003334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032da:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80032dc:	e00d      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80032de:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <HAL_RCC_GetSysClockFreq+0xd4>)
 80032e0:	60bb      	str	r3, [r7, #8]
        break;
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80032e4:	f7ff f967 	bl	80025b6 <LL_RCC_MSI_GetRange>
 80032e8:	4603      	mov	r3, r0
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	60bb      	str	r3, [r7, #8]
        break;
 80032f8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80032fa:	f7ff fa71 	bl	80027e0 <LL_RCC_PLL_GetN>
 80032fe:	4602      	mov	r2, r0
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	fb03 f402 	mul.w	r4, r3, r2
 8003306:	f7ff fa84 	bl	8002812 <LL_RCC_PLL_GetDivider>
 800330a:	4603      	mov	r3, r0
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	3301      	adds	r3, #1
 8003310:	fbb4 f4f3 	udiv	r4, r4, r3
 8003314:	f7ff fa71 	bl	80027fa <LL_RCC_PLL_GetR>
 8003318:	4603      	mov	r3, r0
 800331a:	0f5b      	lsrs	r3, r3, #29
 800331c:	3301      	adds	r3, #1
 800331e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003322:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	bf00      	nop
 8003330:	08004a7c 	.word	0x08004a7c
 8003334:	00f42400 	.word	0x00f42400
 8003338:	01e84800 	.word	0x01e84800

0800333c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b598      	push	{r3, r4, r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003340:	f7ff ff90 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003344:	4604      	mov	r4, r0
 8003346:	f7ff f9e9 	bl	800271c <LL_RCC_GetAHBPrescaler>
 800334a:	4603      	mov	r3, r0
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	4a03      	ldr	r2, [pc, #12]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x24>)
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd98      	pop	{r3, r4, r7, pc}
 8003360:	08004a1c 	.word	0x08004a1c

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b598      	push	{r3, r4, r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003368:	f7ff ffe8 	bl	800333c <HAL_RCC_GetHCLKFreq>
 800336c:	4604      	mov	r4, r0
 800336e:	f7ff f9ef 	bl	8002750 <LL_RCC_GetAPB1Prescaler>
 8003372:	4603      	mov	r3, r0
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	4a04      	ldr	r2, [pc, #16]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x28>)
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd98      	pop	{r3, r4, r7, pc}
 800338c:	08004a5c 	.word	0x08004a5c

08003390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003390:	b598      	push	{r3, r4, r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003394:	f7ff ffd2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003398:	4604      	mov	r4, r0
 800339a:	f7ff f9e5 	bl	8002768 <LL_RCC_GetAPB2Prescaler>
 800339e:	4603      	mov	r3, r0
 80033a0:	0adb      	lsrs	r3, r3, #11
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd98      	pop	{r3, r4, r7, pc}
 80033b8:	08004a5c 	.word	0x08004a5c

080033bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80033c8:	d903      	bls.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80033ca:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e007      	b.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a11      	ldr	r2, [pc, #68]	@ (8003420 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80033e2:	f7ff f9a7 	bl	8002734 <LL_RCC_GetAHB4Prescaler>
 80033e6:	4603      	mov	r3, r0
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	0c9c      	lsrs	r4, r3, #18
 8003406:	f7fe fef5 	bl	80021f4 <HAL_PWREx_GetVoltageRange>
 800340a:	4603      	mov	r3, r0
 800340c:	4619      	mov	r1, r3
 800340e:	4620      	mov	r0, r4
 8003410:	f000 f80c 	bl	800342c <RCC_SetFlashLatency>
 8003414:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	bf00      	nop
 8003420:	08004a7c 	.word	0x08004a7c
 8003424:	08004a1c 	.word	0x08004a1c
 8003428:	431bde83 	.word	0x431bde83

0800342c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b093      	sub	sp, #76	@ 0x4c
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003436:	4b37      	ldr	r3, [pc, #220]	@ (8003514 <RCC_SetFlashLatency+0xe8>)
 8003438:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800343c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800343e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003442:	4a35      	ldr	r2, [pc, #212]	@ (8003518 <RCC_SetFlashLatency+0xec>)
 8003444:	f107 031c 	add.w	r3, r7, #28
 8003448:	ca07      	ldmia	r2, {r0, r1, r2}
 800344a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800344e:	4b33      	ldr	r3, [pc, #204]	@ (800351c <RCC_SetFlashLatency+0xf0>)
 8003450:	f107 040c 	add.w	r4, r7, #12
 8003454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800345a:	2300      	movs	r3, #0
 800345c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003464:	d11a      	bne.n	800349c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003466:	2300      	movs	r3, #0
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
 800346a:	e013      	b.n	8003494 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800346c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3348      	adds	r3, #72	@ 0x48
 8003472:	443b      	add	r3, r7
 8003474:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d807      	bhi.n	800348e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	3348      	adds	r3, #72	@ 0x48
 8003484:	443b      	add	r3, r7
 8003486:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800348a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800348c:	e020      	b.n	80034d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800348e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003490:	3301      	adds	r3, #1
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40
 8003494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003496:	2b03      	cmp	r3, #3
 8003498:	d9e8      	bls.n	800346c <RCC_SetFlashLatency+0x40>
 800349a:	e019      	b.n	80034d0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800349c:	2300      	movs	r3, #0
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a0:	e013      	b.n	80034ca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80034a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	3348      	adds	r3, #72	@ 0x48
 80034a8:	443b      	add	r3, r7
 80034aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d807      	bhi.n	80034c4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3348      	adds	r3, #72	@ 0x48
 80034ba:	443b      	add	r3, r7
 80034bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80034c0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80034c2:	e005      	b.n	80034d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80034c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c6:	3301      	adds	r3, #1
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d9e8      	bls.n	80034a2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80034d0:	4b13      	ldr	r3, [pc, #76]	@ (8003520 <RCC_SetFlashLatency+0xf4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 0207 	bic.w	r2, r3, #7
 80034d8:	4911      	ldr	r1, [pc, #68]	@ (8003520 <RCC_SetFlashLatency+0xf4>)
 80034da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034e0:	f7fd fc22 	bl	8000d28 <HAL_GetTick>
 80034e4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80034e6:	e008      	b.n	80034fa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034e8:	f7fd fc1e 	bl	8000d28 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e007      	b.n	800350a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80034fa:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <RCC_SetFlashLatency+0xf4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003504:	429a      	cmp	r2, r3
 8003506:	d1ef      	bne.n	80034e8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	374c      	adds	r7, #76	@ 0x4c
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	080049f0 	.word	0x080049f0
 8003518:	08004a00 	.word	0x08004a00
 800351c:	08004a0c 	.word	0x08004a0c
 8003520:	58004000 	.word	0x58004000

08003524 <LL_RCC_LSE_IsEnabled>:
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <LL_RCC_LSE_IsEnabled+0x18>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <LL_RCC_LSE_IsEnabled+0x1a>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_LSE_IsReady>:
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d101      	bne.n	8003560 <LL_RCC_LSE_IsReady+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_RCC_LSE_IsReady+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_RCC_MSI_EnablePLLMode>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_RCC_SetRFWKPClockSource>:
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800359e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_RCC_SetSMPSClockSource>:
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f023 0203 	bic.w	r2, r3, #3
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <LL_RCC_SetSMPSPrescaler>:
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80035e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_RCC_SetUSARTClockSource>:
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_SetLPUARTClockSource>:
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_RCC_SetI2CClockSource>:
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003676:	43db      	mvns	r3, r3
 8003678:	401a      	ands	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003682:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_SetLPTIMClockSource>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0c1b      	lsrs	r3, r3, #16
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	43db      	mvns	r3, r3
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_RCC_SetSAIClockSource>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_RCC_SetRNGClockSource>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800370c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_RCC_SetCLK48ClockSource>:
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_RCC_SetUSBClockSource>:
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ffe3 	bl	8003724 <LL_RCC_SetCLK48ClockSource>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <LL_RCC_SetADCClockSource>:
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800377a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_RCC_SetRTCClockSource>:
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_RCC_GetRTCClockSource>:
{
 80037be:	b480      	push	{r7}
 80037c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_RCC_ForceBackupDomainReset>:
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_RCC_ReleaseBackupDomainReset>:
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800380a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_RCC_PLLSAI1_Enable>:
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800382a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_RCC_PLLSAI1_Disable>:
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003848:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800384c:	6013      	str	r3, [r2, #0]
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_RCC_PLLSAI1_IsReady>:
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800386a:	d101      	bne.n	8003870 <LL_RCC_PLLSAI1_IsReady+0x18>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003888:	2300      	movs	r3, #0
 800388a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d034      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038a0:	d021      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80038a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038a6:	d81b      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038ac:	d01d      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80038ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038b2:	d815      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80038b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038bc:	d110      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80038ce:	e00d      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 f94d 	bl	8003b74 <RCCEx_PLLSAI1_ConfigNP>
 80038da:	4603      	mov	r3, r0
 80038dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038de:	e005      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	77fb      	strb	r3, [r7, #31]
        break;
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80038ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fee8 	bl	80036cc <LL_RCC_SetSAIClockSource>
 80038fc:	e001      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
 8003900:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800390a:	2b00      	cmp	r3, #0
 800390c:	d046      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800390e:	f7ff ff56 	bl	80037be <LL_RCC_GetRTCClockSource>
 8003912:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	429a      	cmp	r2, r3
 800391c:	d03c      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800391e:	f7fe fc59 	bl	80021d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff30 	bl	8003792 <LL_RCC_SetRTCClockSource>
 8003932:	e02e      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800393e:	f7ff ff4b 	bl	80037d8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003942:	f7ff ff5a 	bl	80037fa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003954:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800395e:	f7ff fde1 	bl	8003524 <LL_RCC_LSE_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b01      	cmp	r3, #1
 8003966:	d114      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003968:	f7fd f9de 	bl	8000d28 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800396e:	e00b      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd f9da 	bl	8000d28 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d902      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	77fb      	strb	r3, [r7, #31]
              break;
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003988:	f7ff fdde 	bl	8003548 <LL_RCC_LSE_IsReady>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	d1ee      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003992:	7ffb      	ldrb	r3, [r7, #31]
 8003994:	77bb      	strb	r3, [r7, #30]
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7ffb      	ldrb	r3, [r7, #31]
 800399a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fe2a 	bl	8003606 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fe35 	bl	8003632 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe5d 	bl	8003698 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fe52 	bl	8003698 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fe2a 	bl	800365e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fe1f 	bl	800365e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d022      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fe8d 	bl	8003750 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a58:	d10b      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f8e3 	bl	8003c2a <RCCEx_PLLSAI1_ConfigNQ>
 8003a64:	4603      	mov	r3, r0
 8003a66:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003a68:	7ffb      	ldrb	r3, [r7, #31]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003a6e:	7ffb      	ldrb	r3, [r7, #31]
 8003a70:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d02b      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a90:	d003      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fe2a 	bl	80036f8 <LL_RCC_SetRNGClockSource>
 8003aa4:	e00a      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f7ff fe21 	bl	80036f8 <LL_RCC_SetRNGClockSource>
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fe34 	bl	8003724 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ad0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ad4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d022      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fe3d 	bl	8003766 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af4:	d107      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f8e3 	bl	8003ce0 <RCCEx_PLLSAI1_ConfigNR>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7ffb      	ldrb	r3, [r7, #31]
 8003b26:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fd26 	bl	800358a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fd45 	bl	80035de <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fd2c 	bl	80035b6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003b5e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003b6c:	f7ff fcfe 	bl	800356c <LL_RCC_MSI_EnablePLLMode>
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b80:	f7ff fe5b 	bl	800383a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b84:	f7fd f8d0 	bl	8000d28 <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b8a:	e009      	b.n	8003ba0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b8c:	f7fd f8cc 	bl	8000d28 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d902      	bls.n	8003ba0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9e:	e004      	b.n	8003baa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ba0:	f7ff fe5a 	bl	8003858 <LL_RCC_PLLSAI1_IsReady>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d137      	bne.n	8003c20 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003bde:	f7ff fe1d 	bl	800381c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be2:	f7fd f8a1 	bl	8000d28 <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003be8:	e009      	b.n	8003bfe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bea:	f7fd f89d 	bl	8000d28 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d902      	bls.n	8003bfe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003bfc:	e004      	b.n	8003c08 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003bfe:	f7ff fe2b 	bl	8003858 <LL_RCC_PLLSAI1_IsReady>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d1f0      	bne.n	8003bea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c36:	f7ff fe00 	bl	800383a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fd f875 	bl	8000d28 <HAL_GetTick>
 8003c3e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c40:	e009      	b.n	8003c56 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c42:	f7fd f871 	bl	8000d28 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e004      	b.n	8003c60 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c56:	f7ff fdff 	bl	8003858 <LL_RCC_PLLSAI1_IsReady>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d137      	bne.n	8003cd6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c90:	4313      	orrs	r3, r2
 8003c92:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c94:	f7ff fdc2 	bl	800381c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c98:	f7fd f846 	bl	8000d28 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c9e:	e009      	b.n	8003cb4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca0:	f7fd f842 	bl	8000d28 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb2:	e004      	b.n	8003cbe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cb4:	f7ff fdd0 	bl	8003858 <LL_RCC_PLLSAI1_IsReady>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d1f0      	bne.n	8003ca0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d108      	bne.n	8003cd6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003cec:	f7ff fda5 	bl	800383a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cf0:	f7fd f81a 	bl	8000d28 <HAL_GetTick>
 8003cf4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003cf6:	e009      	b.n	8003d0c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf8:	f7fd f816 	bl	8000d28 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d902      	bls.n	8003d0c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0a:	e004      	b.n	8003d16 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d0c:	f7ff fda4 	bl	8003858 <LL_RCC_PLLSAI1_IsReady>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d137      	bne.n	8003d8c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d30:	4313      	orrs	r3, r2
 8003d32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d46:	4313      	orrs	r3, r2
 8003d48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d4a:	f7ff fd67 	bl	800381c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4e:	f7fc ffeb 	bl	8000d28 <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d54:	e009      	b.n	8003d6a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d56:	f7fc ffe7 	bl	8000d28 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
        break;
 8003d68:	e004      	b.n	8003d74 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d6a:	f7ff fd75 	bl	8003858 <LL_RCC_PLLSAI1_IsReady>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d1f0      	bne.n	8003d56 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <LL_RCC_GetUSARTClockSource>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4013      	ands	r3, r2
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_GetLPUARTClockSource>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4013      	ands	r3, r2
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e042      	b.n	8003e6e <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc fdf4 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	@ 0x24
 8003e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa51 	bl	80042c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f826 	bl	8003e78 <UART_SetConfig>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e01b      	b.n	8003e6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fad0 	bl	800440c <UART_CheckIdleState>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b08c      	sub	sp, #48	@ 0x30
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4baf      	ldr	r3, [pc, #700]	@ (8004164 <UART_SetConfig+0x2ec>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4aa4      	ldr	r2, [pc, #656]	@ (8004168 <UART_SetConfig+0x2f0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003eee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	f023 010f 	bic.w	r1, r3, #15
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a95      	ldr	r2, [pc, #596]	@ (800416c <UART_SetConfig+0x2f4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d125      	bne.n	8003f68 <UART_SetConfig+0xf0>
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	f7ff ff3a 	bl	8003d96 <LL_RCC_GetUSARTClockSource>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d81b      	bhi.n	8003f60 <UART_SetConfig+0xe8>
 8003f28:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <UART_SetConfig+0xb8>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f51 	.word	0x08003f51
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f59 	.word	0x08003f59
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f46:	e042      	b.n	8003fce <UART_SetConfig+0x156>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4e:	e03e      	b.n	8003fce <UART_SetConfig+0x156>
 8003f50:	2304      	movs	r3, #4
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f56:	e03a      	b.n	8003fce <UART_SetConfig+0x156>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5e:	e036      	b.n	8003fce <UART_SetConfig+0x156>
 8003f60:	2310      	movs	r3, #16
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f66:	e032      	b.n	8003fce <UART_SetConfig+0x156>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a7e      	ldr	r2, [pc, #504]	@ (8004168 <UART_SetConfig+0x2f0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d12a      	bne.n	8003fc8 <UART_SetConfig+0x150>
 8003f72:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003f76:	f7ff ff1e 	bl	8003db6 <LL_RCC_GetLPUARTClockSource>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f80:	d01a      	beq.n	8003fb8 <UART_SetConfig+0x140>
 8003f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f86:	d81b      	bhi.n	8003fc0 <UART_SetConfig+0x148>
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f8c:	d00c      	beq.n	8003fa8 <UART_SetConfig+0x130>
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f92:	d815      	bhi.n	8003fc0 <UART_SetConfig+0x148>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <UART_SetConfig+0x128>
 8003f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9c:	d008      	beq.n	8003fb0 <UART_SetConfig+0x138>
 8003f9e:	e00f      	b.n	8003fc0 <UART_SetConfig+0x148>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fa6:	e012      	b.n	8003fce <UART_SetConfig+0x156>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fae:	e00e      	b.n	8003fce <UART_SetConfig+0x156>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb6:	e00a      	b.n	8003fce <UART_SetConfig+0x156>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fbe:	e006      	b.n	8003fce <UART_SetConfig+0x156>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	e002      	b.n	8003fce <UART_SetConfig+0x156>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a65      	ldr	r2, [pc, #404]	@ (8004168 <UART_SetConfig+0x2f0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	f040 8097 	bne.w	8004108 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d823      	bhi.n	800402a <UART_SetConfig+0x1b2>
 8003fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe8 <UART_SetConfig+0x170>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800401b 	.word	0x0800401b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800402b 	.word	0x0800402b
 8004008:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff f9aa 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8004010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004012:	e010      	b.n	8004036 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b56      	ldr	r3, [pc, #344]	@ (8004170 <UART_SetConfig+0x2f8>)
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004018:	e00d      	b.n	8004036 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7ff f923 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800401e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004020:	e009      	b.n	8004036 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004028:	e005      	b.n	8004036 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 812b 	beq.w	8004294 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	4a4c      	ldr	r2, [pc, #304]	@ (8004174 <UART_SetConfig+0x2fc>)
 8004044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004048:	461a      	mov	r2, r3
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004050:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	429a      	cmp	r2, r3
 8004060:	d305      	bcc.n	800406e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	d903      	bls.n	8004076 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004074:	e10e      	b.n	8004294 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	2200      	movs	r2, #0
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	60fa      	str	r2, [r7, #12]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	4a3c      	ldr	r2, [pc, #240]	@ (8004174 <UART_SetConfig+0x2fc>)
 8004084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004088:	b29b      	uxth	r3, r3
 800408a:	2200      	movs	r2, #0
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004094:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004098:	f7fc f870 	bl	800017c <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	020b      	lsls	r3, r1, #8
 80040ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040b2:	0202      	lsls	r2, r0, #8
 80040b4:	6979      	ldr	r1, [r7, #20]
 80040b6:	6849      	ldr	r1, [r1, #4]
 80040b8:	0849      	lsrs	r1, r1, #1
 80040ba:	2000      	movs	r0, #0
 80040bc:	460c      	mov	r4, r1
 80040be:	4605      	mov	r5, r0
 80040c0:	eb12 0804 	adds.w	r8, r2, r4
 80040c4:	eb43 0905 	adc.w	r9, r3, r5
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	469a      	mov	sl, r3
 80040d0:	4693      	mov	fp, r2
 80040d2:	4652      	mov	r2, sl
 80040d4:	465b      	mov	r3, fp
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc f84f 	bl	800017c <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4613      	mov	r3, r2
 80040e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ec:	d308      	bcc.n	8004100 <UART_SetConfig+0x288>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f4:	d204      	bcs.n	8004100 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a3a      	ldr	r2, [r7, #32]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e0c9      	b.n	8004294 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004106:	e0c5      	b.n	8004294 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004110:	d16d      	bne.n	80041ee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004116:	3b01      	subs	r3, #1
 8004118:	2b07      	cmp	r3, #7
 800411a:	d82d      	bhi.n	8004178 <UART_SetConfig+0x300>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <UART_SetConfig+0x2ac>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004145 	.word	0x08004145
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004179 	.word	0x08004179
 8004130:	08004153 	.word	0x08004153
 8004134:	08004179 	.word	0x08004179
 8004138:	08004179 	.word	0x08004179
 800413c:	08004179 	.word	0x08004179
 8004140:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7ff f924 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 8004148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800414a:	e01b      	b.n	8004184 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <UART_SetConfig+0x2f8>)
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004150:	e018      	b.n	8004184 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7ff f887 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8004156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004158:	e014      	b.n	8004184 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004160:	e010      	b.n	8004184 <UART_SetConfig+0x30c>
 8004162:	bf00      	nop
 8004164:	cfff69f3 	.word	0xcfff69f3
 8004168:	40008000 	.word	0x40008000
 800416c:	40013800 	.word	0x40013800
 8004170:	00f42400 	.word	0x00f42400
 8004174:	08004abc 	.word	0x08004abc
      default:
        pclk = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8084 	beq.w	8004294 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	4a4b      	ldr	r2, [pc, #300]	@ (80042c0 <UART_SetConfig+0x448>)
 8004192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004196:	461a      	mov	r2, r3
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	fbb3 f3f2 	udiv	r3, r3, r2
 800419e:	005a      	lsls	r2, r3, #1
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	441a      	add	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d916      	bls.n	80041e6 <UART_SetConfig+0x36e>
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041be:	d212      	bcs.n	80041e6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f023 030f 	bic.w	r3, r3, #15
 80041c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	8bfb      	ldrh	r3, [r7, #30]
 80041d8:	4313      	orrs	r3, r2
 80041da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	8bfa      	ldrh	r2, [r7, #30]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e056      	b.n	8004294 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041ec:	e052      	b.n	8004294 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041f2:	3b01      	subs	r3, #1
 80041f4:	2b07      	cmp	r3, #7
 80041f6:	d822      	bhi.n	800423e <UART_SetConfig+0x3c6>
 80041f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <UART_SetConfig+0x388>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004221 	.word	0x08004221
 8004204:	08004229 	.word	0x08004229
 8004208:	0800423f 	.word	0x0800423f
 800420c:	0800422f 	.word	0x0800422f
 8004210:	0800423f 	.word	0x0800423f
 8004214:	0800423f 	.word	0x0800423f
 8004218:	0800423f 	.word	0x0800423f
 800421c:	08004237 	.word	0x08004237
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7ff f8b6 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 8004224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004226:	e010      	b.n	800424a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004228:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <UART_SetConfig+0x44c>)
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800422c:	e00d      	b.n	800424a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422e:	f7ff f819 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8004232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004234:	e009      	b.n	800424a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800423c:	e005      	b.n	800424a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004248:	bf00      	nop
    }

    if (pclk != 0U)
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d021      	beq.n	8004294 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	4a1a      	ldr	r2, [pc, #104]	@ (80042c0 <UART_SetConfig+0x448>)
 8004256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800425a:	461a      	mov	r2, r3
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	441a      	add	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d909      	bls.n	800428e <UART_SetConfig+0x416>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004280:	d205      	bcs.n	800428e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	b29a      	uxth	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e002      	b.n	8004294 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2201      	movs	r2, #1
 8004298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2201      	movs	r2, #1
 80042a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2200      	movs	r2, #0
 80042a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3730      	adds	r7, #48	@ 0x30
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042be:	bf00      	nop
 80042c0:	08004abc 	.word	0x08004abc
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c6:	d10a      	bne.n	80043de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b098      	sub	sp, #96	@ 0x60
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800441c:	f7fc fc84 	bl	8000d28 <HAL_GetTick>
 8004420:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d12f      	bne.n	8004490 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f88e 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d022      	beq.n	8004490 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800446e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e063      	b.n	8004558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d149      	bne.n	8004532 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800449e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a6:	2200      	movs	r2, #0
 80044a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f857 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03c      	beq.n	8004532 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	623b      	str	r3, [r7, #32]
   return(result);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e6      	bne.n	80044b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3308      	adds	r3, #8
 80044f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3308      	adds	r3, #8
 8004508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	617b      	str	r3, [r7, #20]
   return(result);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e012      	b.n	8004558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3758      	adds	r7, #88	@ 0x58
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	e04f      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d04b      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fc fbd5 	bl	8000d28 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <UART_WaitOnFlagUntilTimeout+0x30>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e04e      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d037      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b80      	cmp	r3, #128	@ 0x80
 80045a6:	d034      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d031      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d110      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2208      	movs	r2, #8
 80045c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f838 	bl	800463a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2208      	movs	r2, #8
 80045ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e029      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ec:	d111      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f81e 	bl	800463a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00f      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	429a      	cmp	r2, r3
 800462e:	d0a0      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463a:	b480      	push	{r7}
 800463c:	b095      	sub	sp, #84	@ 0x54
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004660:	643b      	str	r3, [r7, #64]	@ 0x40
 8004662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	61fb      	str	r3, [r7, #28]
   return(result);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800469e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e3      	bne.n	8004674 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d118      	bne.n	80046e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	613b      	str	r3, [r7, #16]
   return(result);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046fa:	bf00      	nop
 80046fc:	3754      	adds	r7, #84	@ 0x54
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UARTEx_DisableFifoMode+0x16>
 8004718:	2302      	movs	r3, #2
 800471a:	e027      	b.n	800476c <HAL_UARTEx_DisableFifoMode+0x66>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800474a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800478c:	2302      	movs	r3, #2
 800478e:	e02d      	b.n	80047ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	@ 0x24
 800479c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f84f 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e02d      	b.n	8004868 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2224      	movs	r2, #36	@ 0x24
 8004818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f811 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004890:	e031      	b.n	80048f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004892:	2308      	movs	r3, #8
 8004894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004896:	2308      	movs	r3, #8
 8004898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	0e5b      	lsrs	r3, r3, #25
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	0f5b      	lsrs	r3, r3, #29
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ba:	7bbb      	ldrb	r3, [r7, #14]
 80048bc:	7b3a      	ldrb	r2, [r7, #12]
 80048be:	4911      	ldr	r1, [pc, #68]	@ (8004904 <UARTEx_SetNbDataToProcess+0x94>)
 80048c0:	5c8a      	ldrb	r2, [r1, r2]
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048c6:	7b3a      	ldrb	r2, [r7, #12]
 80048c8:	490f      	ldr	r1, [pc, #60]	@ (8004908 <UARTEx_SetNbDataToProcess+0x98>)
 80048ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	7b7a      	ldrb	r2, [r7, #13]
 80048dc:	4909      	ldr	r1, [pc, #36]	@ (8004904 <UARTEx_SetNbDataToProcess+0x94>)
 80048de:	5c8a      	ldrb	r2, [r1, r2]
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048e4:	7b7a      	ldrb	r2, [r7, #13]
 80048e6:	4908      	ldr	r1, [pc, #32]	@ (8004908 <UARTEx_SetNbDataToProcess+0x98>)
 80048e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	08004ad4 	.word	0x08004ad4
 8004908:	08004adc 	.word	0x08004adc

0800490c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004914:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004918:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	b29b      	uxth	r3, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	b29b      	uxth	r3, r3
 800492a:	4013      	ands	r3, r2
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <memset>:
 800497e:	4402      	add	r2, r0
 8004980:	4603      	mov	r3, r0
 8004982:	4293      	cmp	r3, r2
 8004984:	d100      	bne.n	8004988 <memset+0xa>
 8004986:	4770      	bx	lr
 8004988:	f803 1b01 	strb.w	r1, [r3], #1
 800498c:	e7f9      	b.n	8004982 <memset+0x4>
	...

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d0d      	ldr	r5, [pc, #52]	@ (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	@ (80049cc <__libc_init_array+0x3c>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2600      	movs	r6, #0
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4d0b      	ldr	r5, [pc, #44]	@ (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	@ (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f818 	bl	80049d8 <_init>
 80049a8:	1b64      	subs	r4, r4, r5
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2600      	movs	r6, #0
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004aec 	.word	0x08004aec
 80049cc:	08004aec 	.word	0x08004aec
 80049d0:	08004aec 	.word	0x08004aec
 80049d4:	08004af0 	.word	0x08004af0

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
